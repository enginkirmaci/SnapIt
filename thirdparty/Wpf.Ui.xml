<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wpf.Ui</name>
    </assembly>
    <members>
        <member name="T:Wpf.Ui.Appearance.Accent">
            <summary>
            Lets you update the color accents of the application.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.Accent.BackgroundBrightnessThresholdValue">
            <summary>
            The maximum value of the background HSV brightness after which the text on the accent will be turned dark.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.SystemAccent">
            <summary>
            SystemAccentColor.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.SystemAccentBrush">
            <summary>
            Brush of the SystemAccentColor.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.PrimaryAccent">
            <summary>
            SystemAccentColorPrimary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.PrimaryAccentBrush">
            <summary>
            Brush of the SystemAccentColorPrimary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.SecondaryAccent">
            <summary>
            SystemAccentColorSecondary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.SecondaryAccentBrush">
            <summary>
            Brush of the SystemAccentColorSecondary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.TertiaryAccent">
            <summary>
            SystemAccentColorTertiary.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Accent.TertiaryAccentBrush">
            <summary>
            Brush of the SystemAccentColorTertiary.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Accent.Apply(System.Windows.Media.Color,Wpf.Ui.Appearance.ThemeType,System.Boolean)">
            <summary>
            Changes the color accents of the application based on the color entered.
            </summary>
            <param name="systemAccent">Primary accent color.</param>
            <param name="themeType">If <see cref="F:Wpf.Ui.Appearance.ThemeType.Dark"/>, the colors will be different.</param>
            <param name="systemGlassColor">If the color is taken from the Glass Color System, its brightness will be increased with the help of the operations on HSV space.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Accent.Apply(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Changes the color accents of the application based on the entered colors.
            </summary>
            <param name="systemAccent">Primary color.</param>
            <param name="primaryAccent">Alternative light or dark color.</param>
            <param name="secondaryAccent">Second alternative light or dark color (most used).</param>
            <param name="tertiaryAccent">Third alternative light or dark color.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Accent.ApplySystemAccent">
            <summary>
            Applies system accent color to the application.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Accent.GetColorizationColor">
            <summary>
            Gets current Desktop Window Manager colorization color.
            <para>It should be the color defined in the system Personalization.</para>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Accent.UpdateColorResources(System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color,System.Windows.Media.Color)">
            <summary>
            Updates application resources.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.AppearanceData">
            <summary>
            Static container for appearance data.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.AppearanceData.ModifiedBackgroundHandles">
            <summary>
            Collection of handles that have a background effect applied.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.AppearanceData.LibraryNamespace">
            <summary>
            Namespace for the XAML dictionaries.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.AppearanceData.LibraryThemeDictionariesUri">
            <summary>
            Default <see cref="T:System.Uri"/> for the application theme dictionaries.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.AppearanceData.LibraryDictionariesUri">
            <summary>
            Default <see cref="T:System.Uri"/> for the application theme dictionaries.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.AppearanceData.SystemTheme">
            <summary>
            Current system theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.AppearanceData.ApplicationTheme">
            <summary>
            Current application theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.AppearanceData.AddHandle(System.Windows.Window)">
            <summary>
            Adds given window to list of modified handles.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.AppearanceData.AddHandle(System.IntPtr)">
            <summary>
            Adds given handle to list of modified handles.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.AppearanceData.RemoveHandle(System.Windows.Window)">
            <summary>
            Removes given window from list of modified handles.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.AppearanceData.RemoveHandle(System.IntPtr)">
            <summary>
            Removes given handle from list of modified handles.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.AppearanceData.HasHandle(System.Windows.Window)">
            <summary>
            Returns a value indicating whether the given window had a modified background.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.AppearanceData.HasHandle(System.IntPtr)">
            <summary>
            Returns a value indicating whether the given handle had a modified background.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.Background">
            <summary>
            Lets you apply background effects to <see cref="T:System.Windows.Window"/> or <c>hWnd</c> by its <see cref="T:System.IntPtr"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.IsSupported(Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Checks if the current <see cref="!:Windows"/> supports selected <see cref="T:Wpf.Ui.Appearance.BackgroundType"/>.
            </summary>
            <param name="type">Background type to check.</param>
            <returns><see langword="true"/> if <see cref="T:Wpf.Ui.Appearance.BackgroundType"/> is supported.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.Apply(System.Windows.Window,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Applies selected background effect to <see cref="T:System.Windows.Window"/> when is rendered.
            </summary>
            <param name="window">Window to apply effect.</param>
            <param name="type">Background type.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.Apply(System.Windows.Window,Wpf.Ui.Appearance.BackgroundType,System.Boolean)">
            <summary>
            Applies selected background effect to <see cref="T:System.Windows.Window"/> when is rendered.
            </summary>
            <param name="window">Window to apply effect.</param>
            <param name="type">Background type.</param>
            <param name="force">Skip the compatibility check.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.Apply(System.IntPtr,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Applies selected background effect to <c>hWnd</c> by it's pointer.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
            <param name="type">Background type.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.Apply(System.IntPtr,Wpf.Ui.Appearance.BackgroundType,System.Boolean)">
            <summary>
            Applies selected background effect to <c>hWnd</c> by it's pointer.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
            <param name="type">Background type.</param>
            <param name="force">Skip the compatibility check.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.Remove(System.Windows.Window)">
            <summary>
            Tries to remove background effects if they have been applied to the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window from which the effect should be removed.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.Remove(System.IntPtr)">
            <summary>
            Tries to remove all effects if they have been applied to the <c>hWnd</c>.
            </summary>
            <param name="handle">Pointer to the window handle.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.RemoveContentBackground(System.Windows.Window)">
            <summary>
            Tries to remove background from <see cref="T:System.Windows.Window"/> and it's composition area.
            </summary>
            <param name="window">Window to manipulate.</param>
            <returns><see langword="true"/> if operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.RestoreContentBackground(System.Windows.Window)">
            <summary>
            Tries to restore default background for <see cref="T:System.Windows.Window"/> and it's composition target.
            </summary>
            <param name="window">Window to manipulate.</param>
            <returns><see langword="true"/> if operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Background.RestoreContentBackground(System.IntPtr)">
            <summary>
            Tries to restore default background for <see cref="T:System.Windows.Window"/> composition target, based on it's handle.
            </summary>
            <param name="hWnd">Window handle.</param>
            <returns><see langword="true"/> if operation was successful.</returns>
        </member>
        <member name="T:Wpf.Ui.Appearance.BackgroundType">
            <summary>
            Collection of fluent background types.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.BackgroundType.Unknown">
            <summary>
            Unknown background type.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.BackgroundType.None">
            <summary>
            No backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.BackgroundType.Auto">
            <summary>
            Sets <c>DWMWA_SYSTEMBACKDROP_TYPE</c> to <see langword="0"></see>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.BackgroundType.Mica">
            <summary>
            Windows 11 Mica effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.BackgroundType.Acrylic">
            <summary>
            Windows Acrylic effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.BackgroundType.Tabbed">
            <summary>
            Windows 11 wallpaper blur effect.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.ResourceDictionaryManager">
            <summary>
            Allows managing application dictionaries.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.ResourceDictionaryManager.SearchNamespace">
            <summary>
            Namespace, e.g. the library the resource is being searched for.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.ResourceDictionaryManager.HasDictionary(System.String)">
            <summary>
            Shows whether the application contains the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
            <param name="resourceLookup">Any part of the resource name.</param>
            <returns><see langword="false"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ResourceDictionaryManager.GetDictionary(System.String)">
            <summary>
            Gets the <see cref="T:System.Windows.ResourceDictionary"/> if exists.
            </summary>
            <param name="resourceLookup">Any part of the resource name.</param>
            <returns><see cref="T:System.Windows.ResourceDictionary"/>, <see langword="null"/> if it doesn't exist.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.ResourceDictionaryManager.UpdateDictionary(System.String,System.Uri)">
            <summary>
            Shows whether the application contains the <see cref="T:System.Windows.ResourceDictionary"/>.
            </summary>
            <param name="resourceLookup">Any part of the resource name.</param>
            <param name="newResourceUri">A valid <see cref="T:System.Uri"/> for the replaced resource.</param>
            <returns></returns>
        </member>
        <member name="P:Wpf.Ui.Appearance.SystemTheme.GlassColor">
            <summary>
            Gets the current main color of the system.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wpf.Ui.Appearance.SystemTheme.HighContrast">
            <summary>
            Determines whether the system is currently set to hight contrast mode.
            </summary>
            <returns><see langword="true"/> if <see cref="P:System.Windows.SystemParameters.HighContrast"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.SystemTheme.GetTheme">
            <summary>
            Gets currently set system theme based on <see cref="T:Microsoft.Win32.Registry"/> value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.SystemThemeType">
            <summary>
            Collection of Windows 11 themes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Unknown">
            <summary>
            Unknown Windows theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Custom">
            <summary>
            Custom Windows theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Light">
            <summary>
            Default light theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Dark">
            <summary>
            Default dark theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Glow">
            <summary>
            First custom, kinda purple Windows 11 theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.CapturedMotion">
            <summary>
            Second custom, kinda red Windows 11 theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Sunrise">
            <summary>
            Third custom, kinda washed off cyan Windows 11 theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.SystemThemeType.Flow">
            <summary>
            Fourth custom, kinda gray Windows 11 theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.Theme">
            <summary>
            Allows to manage available color themes from the library.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Appearance.Theme.Changed">
            <summary>
            Event triggered when the application's theme is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.IsHighContrast">
            <summary>
            Gets a value that indicates whether the application is currently using the high contrast theme.
            </summary>
            <returns><see langword="true"/> if application uses high contrast theme.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.IsSystemHighContrast">
            <summary>
            Gets a value that indicates whether the Windows is currently using the high contrast theme.
            </summary>
            <returns><see langword="true"/> if system uses high contrast theme.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.Apply(Wpf.Ui.Appearance.ThemeType,Wpf.Ui.Appearance.BackgroundType,System.Boolean,System.Boolean)">
            <summary>
            Changes the current application theme.
            </summary>
            <param name="themeType">Theme to set.</param>
            <param name="backgroundEffect">Whether the custom background effect should be applied.</param>
            <param name="updateAccent">Whether the color accents should be changed.</param>
            <param name="forceBackground">If <see langword="true"/>, bypasses the app's theme compatibility check and tries to force the change of a background effect.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.GetAppTheme">
            <summary>
            Gets currently set application theme.
            </summary>
            <returns><see cref="F:Wpf.Ui.Appearance.ThemeType.Unknown"/> if something goes wrong.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.GetSystemTheme">
            <summary>
            Gets currently set system theme.
            </summary>
            <returns><see cref="F:Wpf.Ui.Appearance.SystemThemeType.Unknown"/> if something goes wrong.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.IsAppMatchesSystem">
            <summary>
            Gets a value that indicates whether the application is matching the system theme.
            </summary>
            <returns><see langword="true"/> if the application has the same theme as the system.</returns>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.IsMatchedDark">
            <summary>
            Checks if the application and the operating system are currently working in a dark theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.IsMatchedLight">
            <summary>
            Checks if the application and the operating system are currently working in a light theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.ApplyDarkThemeToWindow(System.Windows.Window)">
            <summary>
            Tries to apply dark theme to <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.RemoveDarkThemeFromWindow(System.Windows.Window)">
            <summary>
            Tries to remove dark theme from <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.FetchApplicationTheme">
            <summary>
            Tries to guess the currently set application theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.FetchSystemTheme">
            <summary>
            Tries to guess the currently set system theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Theme.UpdateBackground(Wpf.Ui.Appearance.ThemeType,Wpf.Ui.Appearance.BackgroundType,System.Boolean)">
            <summary>
            Forces change to application background. Required if custom background effect was previously applied.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.ThemeChangedEvent">
            <summary>
            Event triggered when application theme is updated.
            </summary>
            <param name="currentTheme">Current application <see cref="T:Wpf.Ui.Appearance.ThemeType"/>.</param>
            <param name="systemAccent">Current base system accent <see cref="T:System.Windows.Media.Color"/>.</param>
        </member>
        <member name="T:Wpf.Ui.Appearance.ThemeType">
            <summary>
            Collection of application themes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ThemeType.Unknown">
            <summary>
            Unknown application theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ThemeType.Dark">
            <summary>
            Dark application theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ThemeType.Light">
            <summary>
            Light application theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.ThemeType.HighContrast">
            <summary>
            High contract application theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.Watcher">
            <summary>
            Automatically updates the application background if the system theme or color is changed.
            <para><see cref="T:Wpf.Ui.Appearance.Watcher"/> settings work globally as a singleton, they cannot be changed for each <see cref="T:System.Windows.Window"/>.</para>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Watcher.BackgroundEffect">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Wpf.Ui.Appearance.Watcher"/> uses custom <see cref="T:Wpf.Ui.Appearance.BackgroundType"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Watcher.UpdateAccents">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Wpf.Ui.Appearance.Watcher"/> uses <see cref="T:Wpf.Ui.Appearance.Accent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Appearance.Watcher.ForceBackground">
            <summary>
            Gets or sets a value that indicates whether the <see cref="T:Wpf.Ui.Appearance.Watcher"/> forces the background effect to be applied.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Appearance.Watcher.Watch(System.Windows.Window,Wpf.Ui.Appearance.BackgroundType,System.Boolean,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Wpf.Ui.Appearance.Watcher"/> and attaches the instance to the given <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window that will be updated by <see cref="T:Wpf.Ui.Appearance.Watcher"/>.</param>
            <param name="backgroundEffect">Background effect to be applied when changing the theme.</param>
            <param name="updateAccents">If <see langword="true"/>, the accents will be updated when the change is detected.</param>
            <param name="forceBackground">If <see langword="true"/>, bypasses the app's theme compatibility check and tries to force the change of a background effect.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Watcher.#ctor(System.IntPtr,Wpf.Ui.Appearance.BackgroundType,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of <see cref="T:Wpf.Ui.Appearance.Watcher"/>.
            </summary>
            <param name="hWnd">Window handle</param>
            <param name="backgroundEffect">Background effect to be applied when changing the theme.</param>
            <param name="updateAccents">If <see langword="true"/>, the accents will be updated when the change is detected.</param>
            <param name="forceBackground">If <see langword="true"/>, bypasses the app's theme compatibility check and tries to force the change of a background effect.</param>
        </member>
        <member name="M:Wpf.Ui.Appearance.Watcher.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Listens to system messages on the application windows.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Appearance.WindowCornerPreference">
            <summary>
            Ways you can round windows.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.WindowCornerPreference.Default">
            <summary>
            Determined by system or application preference.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.WindowCornerPreference.DoNotRound">
            <summary>
            Do not round the corners.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.WindowCornerPreference.Round">
            <summary>
            Round the corners.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Appearance.WindowCornerPreference.RoundSmall">
            <summary>
            Round the corners slightly.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.Clipboard">
            <summary>
            Provides methods to place data on and retrieve data from the system clipboard.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.Clipboard.SetText(System.String)">
            <summary>
            Set the text data to Clipboard.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.ControlAppearance">
            <summary>
            Types of the available color accents of the controls.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Primary">
            <summary>
            Control color according to the current theme accent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Secondary">
            <summary>
            Control color according to the current theme element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Info">
            <summary>
            Blue color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Dark">
            <summary>
            Dark color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Light">
            <summary>
            Light color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Danger">
            <summary>
            Red color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Success">
            <summary>
            Green color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Caution">
            <summary>
            Orange color theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ControlAppearance.Transparent">
            <summary>
            Transparent color theme.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.DesignerHelper">
            <summary>
            Helper class for Visual Studio designer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Common.DesignerHelper.IsInDesignMode">
            <summary>
            Indicates whether the project is currently in design mode.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Common.DesignerHelper.IsDebugging">
            <summary>
            Indicates whether the project is currently debugged.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.ElementPlacement">
            <summary>
            Decides where to put the element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ElementPlacement.Left">
            <summary>
            Puts the control element on the left.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ElementPlacement.Right">
            <summary>
            Puts the control element on the right.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.EventIdentifier">
            <summary>
            Class used to create identifiers of threads or tasks that can be performed multiple times within one instance.
            <see cref="P:Wpf.Ui.Common.EventIdentifier.Current"/> represents roughly the time in Unix microseconds at which it was taken.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Common.EventIdentifier.Current">
            <summary>
            Current identifier.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.EventIdentifier.GetNext">
            <summary>
            Creates and gets the next identifier.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.EventIdentifier.IsEqual(System.Int64)">
            <summary>
            Checks if the identifiers are the same.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.EventIdentifier.UpdateIdentifier">
            <summary>
            Creates and assigns a random value with an extra time code if possible.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.Glyph">
            <summary>
            Set of static methods to operate on <see cref="T:Wpf.Ui.Common.SymbolRegular"/> and <see cref="T:Wpf.Ui.Common.SymbolFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.Glyph.DefaultIcon">
            <summary>
            If the icon is not found in some places, this one will be displayed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.Glyph.DefaultFilledIcon">
            <summary>
            If the filled icon is not found in some places, this one will be displayed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.Glyph.Parse(System.String)">
            <summary>
            Finds icon based on name.
            </summary>
            <param name="name">Name of the icon.</param>
        </member>
        <member name="M:Wpf.Ui.Common.Glyph.ParseFilled(System.String)">
            <summary>
            Finds icon based on name.
            </summary>
            <param name="name">Name of the icon.</param>
        </member>
        <member name="T:Wpf.Ui.Common.Interfaces.INavigationAware">
            <summary>
            Notifies class about being navigated.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.Interfaces.INavigationAware.OnNavigatedTo">
            <summary>
            Method triggered when the class is navigated.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.Interfaces.INavigationAware.OnNavigatedFrom">
            <summary>
            Method triggered when the navigation leaves the current class.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.IRelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The
            default return value for the <see cref="M:Wpf.Ui.Common.IRelayCommand.CanExecute(System.Object)"/> method is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.IRelayCommand.CanExecute(System.Object)">
            <summary>
            Gets encapsulated canExecute function.
            </summary>
            <param name="parameter"></param>
        </member>
        <member name="M:Wpf.Ui.Common.IRelayCommand.Execute(System.Object)">
            <summary>
            Triggers action with provided parameter.
            </summary>
            <param name="parameter">Argument to be passed.</param>
        </member>
        <member name="T:Wpf.Ui.Common.ItemRange">
            <summary>
            Items range.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.RelayCommand">
            <summary>
            A command whose sole purpose is to relay its functionality to other objects by invoking delegates. The
            default return value for the <see cref="M:Wpf.Ui.Common.RelayCommand.CanExecute(System.Object)"/> method is <see langword="true"/>.
            <para>
            <see href="https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.input.icommand?view=winrt-22000"/>
            </para>
            </summary>
        </member>
        <member name="E:Wpf.Ui.Common.RelayCommand.CanExecuteChanged">
            <summary>
            Event occuring when encapsulated canExecute method is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.RelayCommand.#ctor(System.Action)">
            <summary>
            Creates new instance of <see cref="T:Wpf.Ui.Common.RelayCommand"/>.
            </summary>
            <param name="execute">Action to be executed.</param>
        </member>
        <member name="M:Wpf.Ui.Common.RelayCommand.#ctor(System.Action{System.Object})">
            <summary>
            Creates new instance of <see cref="T:Wpf.Ui.Common.RelayCommand"/>.
            </summary>
            <param name="execute">Action with <see cref="T:System.Object"/> parameter to be executed.</param>
        </member>
        <member name="M:Wpf.Ui.Common.RelayCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates new instance of <see cref="T:Wpf.Ui.Common.RelayCommand"/>.
            </summary>
            <param name="execute">Action to be executed.</param>
            <param name="canExecute">Encapsulated method determining whether to execute action.</param>
            <exception cref="T:System.ArgumentNullException">Exception occurring when no <see cref="T:System.Action"/> is defined.</exception>
        </member>
        <member name="M:Wpf.Ui.Common.RelayCommand.#ctor(System.Action{System.Object},System.Func{System.Boolean})">
            <summary>
            Creates new instance of <see cref="T:Wpf.Ui.Common.RelayCommand"/>.
            </summary>
            <param name="execute">Action with <see cref="T:System.Object"/> parameter to be executed.</param>
            <param name="canExecute">Encapsulated method determining whether to execute action.</param>
            <exception cref="T:System.ArgumentNullException">Exception occurring when no <see cref="T:System.Action"/> is defined.</exception>
        </member>
        <member name="M:Wpf.Ui.Common.RelayCommand.CanExecute(System.Object)">
            <inheritdoc cref="M:Wpf.Ui.Common.IRelayCommand.CanExecute(System.Object)" />
        </member>
        <member name="M:Wpf.Ui.Common.RelayCommand.Execute(System.Object)">
            <inheritdoc cref="M:Wpf.Ui.Common.IRelayCommand.Execute(System.Object)" />
        </member>
        <member name="T:Wpf.Ui.Common.RoutedDialogEvent">
            <summary>
            Event triggered on via <see cref="T:Wpf.Ui.Controls.Dialog"/>.
            </summary>
            <param name="sender">Current <see cref="T:Wpf.Ui.Controls.Dialog"/> instance.</param>
        </member>
        <member name="T:Wpf.Ui.Common.RoutedNavigationEvent">
            <summary>
            Event triggered on successful navigation.
            </summary>
            <param name="sender">Current navigation instance.</param>
        </member>
        <member name="T:Wpf.Ui.Common.RoutedNavigationEventArgs">
            <summary>
            <see cref="T:System.Windows.RoutedEventArgs"/> with additional <see cref="P:Wpf.Ui.Common.RoutedNavigationEventArgs.CurrentPage"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Common.RoutedNavigationEventArgs.CurrentPage">
            <summary>
            Currently displayed page.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Common.RoutedNavigationEventArgs.#ctor(System.Windows.RoutedEvent,System.Object,Wpf.Ui.Controls.Interfaces.INavigationItem)">
            <summary>
            Constructor for <see cref="T:System.Windows.RoutedEventArgs"/>.
            </summary>
            <param name="source">The new value that the SourceProperty is being set to.</param>
            <param name="routedEvent">The new value that the <see cref="T:System.Windows.RoutedEvent"/> Property is being set to.</param>
            <param name="currentPage">Currently displayed page.</param>
        </member>
        <member name="T:Wpf.Ui.Common.RoutedNotifyIconEvent">
            <summary>
            Event triggered on successful navigation.
            </summary>
            <param name="sender">Current navigation instance.</param>
        </member>
        <member name="T:Wpf.Ui.Common.RoutedSnackbarEvent">
            <summary>
            Event triggered on via <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
            <param name="sender">Current <see cref="T:Wpf.Ui.Controls.Snackbar"/> instance.</param>
        </member>
        <member name="T:Wpf.Ui.Common.ScrollDirection">
            <summary>
            Direction of <see cref="T:System.Windows.Controls.ScrollViewer"/>.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ScrollDirection.Vertical">
            <summary>
            Vertical scroll direction.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.ScrollDirection.Horizontal">
            <summary>
            Horizontal scroll direction.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.SpacingMode">
            <summary>
            Specifies how remaining space is distributed.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.SpacingMode.None">
            <summary>
            Spacing is disabled and all items will be arranged as closely as possible.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.SpacingMode.Uniform">
            <summary>
            The remaining space is evenly distributed between the items on a layout row, as well as the start and end of each row.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.SpacingMode.BetweenItemsOnly">
            <summary>
            The remaining space is evenly distributed between the items on a layout row, excluding the start and end of each row.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.SpacingMode.StartAndEndOnly">
            <summary>
            The remaining space is evenly distributed between start and end of each row.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.SymbolFilled">
            <summary>
            Represents a list of filled Fluent System Icons <c>v.1.1.172</c>.
            <para>May be converted to <see langword="char"/> using <c>GetGlyph()</c> or to <see langword="string"/> using <c>GetString()</c></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.SymbolFilled.Empty">
            <summary>
            Actually, this icon is not empty, but makes it easier to navigate.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Common.SymbolRegular">
            <summary>
            Represents a list of Fluent System Icons <c>v.1.1.172</c>.
            <para>May be converted to <see langword="char"/> using <c>GetGlyph()</c> or to <see langword="string"/> using <c>GetString()</c></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Common.SymbolRegular.Empty">
            <summary>
            Actually, this icon is not empty, but makes it easier to navigate.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Anchor">
            <summary>
            Creates a hyperlink to web pages, files, email addresses, locations in the same page, or anything else a URL can address.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Anchor.NavigateUriProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Anchor.NavigateUri"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Anchor.NavigateUri">
            <summary>
            Gets or sets the URL that the hyperlink points to.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Anchor.OnClick">
            <summary>
            This virtual method is called when button is clicked and it raises the Click event
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Arc">
            <summary>
            Control that draws a symmetrical arc with rounded edges.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Arc.StartAngleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Arc.StartAngle"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Arc.EndAngleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.StartAngle">
            <summary>
            Gets or sets the initial angle from which the arc will be drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.EndAngle">
            <summary>
            Gets or sets the final angle from which the arc will be drawn.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.IsLargeArc">
            <summary>
            If IsLargeArc is <see langword="true"/>, then one of the two larger arc sweeps is chosen; otherwise, if is <see langword="false"/>, one of the smaller arc sweeps is chosen.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Arc.DefiningGeometry">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.#cctor">
            <summary>
            Overrides default properties.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.GetDefiningGeometry">
            <summary>
            Get the geometry that defines this shape.
            <para><see href="https://stackoverflow.com/a/36756365/13224348">Based on Mark Feldman implementation.</see></para>
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.PointAtAngle(System.Double)">
            <summary>
            Draws a point on the coordinates of the given angle.
            <para><see href="https://stackoverflow.com/a/36756365/13224348">Based on Mark Feldman implementation.</see></para>
            </summary>
            <param name="angle">The angle at which to create the point.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.Arc.PropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Event triggered when one of the key parameters is changed. Forces the geometry to be redrawn.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.AutoSuggestBox">
            <summary>
            Represents a text control that makes suggestions to users as they enter text using a keyboard.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox._currentText">
            <summary>
            The current text in <see cref="P:System.Windows.Controls.TextBox.Text"/> used for validation purposes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.ElementPopup">
            <summary>
            Template element represented by the <c>PART_Popup</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.ElementSuggestionsPresenter">
            <summary>
            Template element represented by the <c>PART_SuggestionsPresenter</c> name.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.Popup">
            <summary>
            Popup with suggestions.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.SuggestionsPresenter">
            <summary>
            List of suggestions inside <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.Popup"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.ItemsSourceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.ItemsSource"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.FilteredItemsSourceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.FilteredItemsSource"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.IsSuggestionListOpenProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.IsSuggestionListOpen"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.MaxDropDownHeightProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.MaxDropDownHeight"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmittedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmitted"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosenEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosen"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.AcceptsReturn">
            <summary>
            <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/> does no accept returns.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.MaxLines">
            <summary>
            <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/> does not accept changes to the number of lines.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.MinLines">
            <summary>
            <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/> does not accept changes to the number of lines.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.ItemsSource">
            <summary>
            ItemsSource specifies a collection used to generate the list of suggestions
            for <see cref="T:Wpf.Ui.Controls.AutoSuggestBox"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.FilteredItemsSource">
            <summary>
            Filtered <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.ItemsSource"/> based on provided text.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.IsSuggestionListOpen">
            <summary>
            Gets or sets a value representing whether the suggestion list should be opened.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.AutoSuggestBox.MaxDropDownHeight">
            <summary>
            Gets or sets the maximum height of the drop-down list with suggestions.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.AutoSuggestBox.QuerySubmitted">
            <summary>
            Event occurs when a user commits a query string.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.AutoSuggestBox.SuggestionChosen">
            <summary>
            Event occurs when the user selects an item from the recommended ones.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnApplyTemplate">
            <summary>
            Invoked whenever application code or an internal process,
            such as a rebuilding layout pass, calls the ApplyTemplate method.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnSuggestionsPresenterLostFocus(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called after presenter containing suggestion loses focus.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnSuggestionsPresenterSelectionChanged(System.Object,System.Windows.Controls.SelectionChangedEventArgs)">
            <summary>
            This virtual method is called after one of the suggestion is selected.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnQuerySubmitted">
            <summary>
            This virtual method is called after submitting a query.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnSuggestionChosen">
            <summary>
            This virtual method is called after selecting a suggestion.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.AutoSuggestBox.OnItemsSourceChanged(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            This virtual method is called after <see cref="P:Wpf.Ui.Controls.AutoSuggestBox.ItemsSource"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Badge">
            <summary>
            Used to highlight an item, attract attention or flag status.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Badge.AppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Badge.Appearance"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Badge.Appearance">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.Breadcrumb">
            <summary>
            Displays the name of the current <see cref="T:Wpf.Ui.Controls.NavigationItem"/> and it's parents that can be navigated using <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Breadcrumb.CurrentProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Breadcrumb.Current"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Breadcrumb.NavigationProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Breadcrumb.Navigation"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Breadcrumb.Current">
            <summary>
            <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> based on which <see cref="T:Wpf.Ui.Controls.Breadcrumb"/> displays the titles.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Breadcrumb.Navigation">
            <summary>
            <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> based on which <see cref="T:Wpf.Ui.Controls.Breadcrumb"/> displays the titles.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Button">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Button"/>, adding <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.IconForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.AppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.Appearance"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.MouseOverBackgroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.MouseOverBackground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.MouseOverBorderBrushProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.MouseOverBorderBrush"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.PressedForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.PressedForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.PressedBackgroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.PressedBackground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Button.PressedBorderBrushProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Button.PressedBorderBrush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Button.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Button.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.Appearance">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Button.MouseOverBackground">
            <summary>
            Background <see cref="T:System.Windows.Media.Brush"/> when the user interacts with an element with a pointing device.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.MouseOverBorderBrush">
            <summary>
            Border <see cref="T:System.Windows.Media.Brush"/> when the user interacts with an element with a pointing device.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.PressedForeground">
            <summary>
            Foreground when pressed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.PressedBackground">
            <summary>
            Background <see cref="T:System.Windows.Media.Brush"/> when the user clicks the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Button.PressedBorderBrush">
            <summary>
            Border <see cref="T:System.Windows.Media.Brush"/> when the user clicks the button.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Card">
            <summary>
            Simple Card with content and <see cref="P:Wpf.Ui.Controls.Card.Footer"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Card.FooterProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Card.Footer"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Card.HasFooterProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Card.HasFooter"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Card.Footer">
            <summary>
            Gets or sets additional content displayed at the bottom.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Card.HasFooter">
            <summary>
            Gets information whether the <see cref="T:Wpf.Ui.Controls.Card"/> has a <see cref="P:Wpf.Ui.Controls.Card.Footer"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardAction">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> interactive card styled according to Fluent Design.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardAction.ShowChevronProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardAction.ShowChevron"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardAction.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardAction.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardAction.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardAction.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardAction.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardAction.IconForeground"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardAction.ShowChevron">
            <summary>
            Gets or sets information whether to display the chevron icon on the right side of the card.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardAction.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.CardAction.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.CardAction.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardColor">
            <summary>
            Ala Pa**one color card.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.TitleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardColor.Title"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.SubtitleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardColor.Subtitle"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.SubtitleFontSizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardColor.SubtitleFontSize"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.ColorProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardColor.Color"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.BrushProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardColor.Brush"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardColor.CardBrushProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardColor.CardBrush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Title">
            <summary>
            Gets or sets the main text displayed below the color.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Subtitle">
            <summary>
            Gets or sets text displayed under main <see cref="P:Wpf.Ui.Controls.CardColor.Title"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.SubtitleFontSize">
            <summary>
            Gets or sets the font size of <see cref="P:Wpf.Ui.Controls.CardColor.Subtitle"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Color">
            <summary>
            Gets or sets the displayed <see cref="P:Wpf.Ui.Controls.CardColor.CardBrush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.Brush">
            <summary>
            Gets or sets the displayed <see cref="P:Wpf.Ui.Controls.CardColor.CardBrush"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardColor.CardBrush">
            <summary>
            Gets the <see cref="T:System.Windows.Media.Brush"/> displayed in <see cref="T:Wpf.Ui.Controls.CardColor"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CardColor.OnSubtitlePropertyChanged">
            <summary>
            Virtual method triggered when <see cref="P:Wpf.Ui.Controls.CardColor.Subtitle"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CardColor.OnColorPropertyChanged">
            <summary>
            Virtual method triggered when <see cref="P:Wpf.Ui.Controls.CardColor.Color"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CardColor.OnBrushPropertyChanged">
            <summary>
            Virtual method triggered when <see cref="P:Wpf.Ui.Controls.CardColor.Brush"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardControl">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Primitives.ButtonBase"/> control which displays an additional control on the right side of the card.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.HeaderProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardControl.Header"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardControl.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardControl.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardControl.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardControl.IconForeground"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.Header">
            <summary>
            Header is the data used to for the header of each item in the control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.CardControl.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.CardExpander">
            <summary>
            Inherited from the <see cref="T:System.Windows.Controls.Expander"/> control which can hide the collapsible content.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardExpander.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardExpander.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardExpander.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardExpander.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CardExpander.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CardExpander.IconForeground"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CardExpander.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.CardExpander.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.CardExpander.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ClientAreaBorder">
            <summary>
            If you use <see cref="T:System.Windows.Shell.WindowChrome"/> to extend the UI elements to the non-client area, you can include this container
            in the template of <see cref="T:System.Windows.Window"/> so that the content inside automatically fills the client area.
            Using this container can let you get rid of various margin adaptations done in
            Setter/Trigger of the style of <see cref="T:System.Windows.Window"/> when the window state changes.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ClientAreaBorder.PaddedBorderThickness">
            <summary>
            Get the system <see cref="F:Wpf.Ui.Controls.ClientAreaBorder.SM_CXPADDEDBORDER"/> value in WPF units.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ClientAreaBorder.ResizeFrameBorderThickness">
            <summary>
            Get the system <see cref="F:Wpf.Ui.Controls.ClientAreaBorder.SM_CXFRAME"/> and <see cref="F:Wpf.Ui.Controls.ClientAreaBorder.SM_CYFRAME"/> values in WPF units.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ClientAreaBorder.WindowChromeNonClientFrameThickness">
            <summary>
            If you use a <see cref="T:System.Windows.Shell.WindowChrome"/> to extend the client area of a window to the non-client area, you need to handle the edge margin issue when the window is maximized.
            Use this property to get the correct margin value when the window is maximized, so that when the window is maximized, the client area can completely cover the screen client area by no less than a single pixel at any DPI.
            The<see cref="M:Wpf.Ui.Interop.User32.GetSystemMetrics(Wpf.Ui.Interop.User32.SM)"/> method cannot obtain this value directly.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ClientAreaBorder.OnVisualParentChanged(System.Windows.DependencyObject)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Controls.CodeBlock">
            <summary>
            Formats and display a fragment of the source code.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CodeBlock.SyntaxContentProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CodeBlock.SyntaxContent"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.CodeBlock.ButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.CodeBlock.ButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CodeBlock.SyntaxContent">
            <summary>
            Formatted <see cref="P:System.Windows.Controls.ContentControl.Content"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.CodeBlock.ButtonCommand">
            <summary>
            Command triggered after clicking the control button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CodeBlock.#ctor">
            <summary>
            Creates new instance and assigns <see cref="P:Wpf.Ui.Controls.CodeBlock.ButtonCommand"/> default action.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.CodeBlock.OnContentChanged(System.Object,System.Object)">
            <summary>
            This method is invoked when the Content property changes.
            </summary>
            <param name="oldContent">The old value of the Content property.</param>
            <param name="newContent">The new value of the Content property.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.Dialog">
            <summary>
            Displays a large card with a slightly transparent background and two action buttons.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.IsShownProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.IsShown"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.DialogWidthProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.DialogWidth"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.DialogHeightProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.DialogHeight"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonLeftNameProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.ButtonLeftName"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonLeftClickEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.Dialog.ButtonLeftClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonRightNameProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.ButtonRightName"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonLeftAppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.ButtonLeftAppearance"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonLeftVisibilityProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.ButtonLeftVisibility"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonRightClickEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.Dialog.ButtonRightClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonRightAppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.ButtonRightAppearance"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ButtonRightVisibilityProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.ButtonRightVisibility"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.TemplateButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Dialog.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.IsShown">
            <summary>
            Gets or sets information whether the dialog should be displayed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.DialogWidth">
            <summary>
            Gets or sets maximum dialog width.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.DialogHeight">
            <summary>
            Gets or sets dialog height.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.ButtonLeftName">
            <summary>
            Name of the button on the left side of footer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.ButtonLeftAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.ControlAppearance"/> of the button on the left, if available.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.ButtonLeftVisibility">
            <summary>
            Gets or sets the visibility of the button on the left.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Dialog.ButtonLeftClick">
            <summary>
            Action triggered after clicking left button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.ButtonRightName">
            <summary>
            Name of the button on the right side of footer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.ButtonRightAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.ControlAppearance"/> of the button on the right, if available.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.ButtonRightVisibility">
            <summary>
            Gets or sets the visibility of the button on the right.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Dialog.ButtonRightClick">
            <summary>
            Action triggered after clicking right button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Dialog.TemplateButtonCommand">
            <summary>
            Command triggered after clicking the button on the Footer.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.OpenedEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Dialog"/> opens.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Dialog.Opened">
            <summary>
            Add / Remove <see cref="F:Wpf.Ui.Controls.Dialog.OpenedEvent"/> handler.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Dialog.ClosedEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Dialog"/> opens.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Dialog.Closed">
            <summary>
            Add / Remove <see cref="F:Wpf.Ui.Controls.Dialog.ClosedEvent"/> handler.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Dialog.#ctor">
            <summary>
            Creates new instance and sets default <see cref="F:Wpf.Ui.Controls.Dialog.TemplateButtonCommandProperty"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Dialog.Show">
            <summary>
            Reveals the <see cref="T:Wpf.Ui.Controls.Dialog"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Dialog.Hide">
            <summary>
            Hides the <see cref="T:Wpf.Ui.Controls.Dialog"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Dialog.OnOpened">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Dialog"/> is opening and it raises the <see cref="E:Wpf.Ui.Controls.Dialog.Opened"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Dialog.OnClosed">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Dialog"/> is closing and it raises the <see cref="E:Wpf.Ui.Controls.Dialog.Closed"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.DropDownButton">
            <summary>
            A control that drop downs a flyout of choices from which one can be chosen.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.DynamicScrollBar">
            <summary>
            Custom <see cref="T:System.Windows.Controls.Primitives.ScrollBar"/> with events depending on actions taken by the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollBar.IsScrollingProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollBar.IsScrolling"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollBar.IsInteractedProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollBar.IsInteracted"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollBar.TimeoutProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollBar.Timeout"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollBar.IsScrolling">
            <summary>
            Gets or sets information whether the user was scrolling for the last few seconds.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollBar.IsInteracted">
            <summary>
            Informs whether the user has taken an action related to scrolling.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollBar.Timeout">
            <summary>
            Gets or sets additional delay after which the <see cref="T:Wpf.Ui.Controls.DynamicScrollBar"/> should be hidden.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.DynamicScrollBar.OnMouseEnter(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method reporting the mouse entered this element.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.DynamicScrollBar.OnMouseLeave(System.Windows.Input.MouseEventArgs)">
            <summary>
            Method reporting the mouse leaved this element.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.DynamicScrollViewer">
            <summary>
            Custom <see cref="T:System.Windows.Controls.ScrollViewer"/> with events depending on actions taken by the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingVerticallyProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingVertically"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingHorizontallyProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingHorizontally"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.MinimalChangeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.MinimalChange"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.DynamicScrollViewer.TimeoutProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.DynamicScrollViewer.Timeout"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingVertically">
            <summary>
            Gets or sets information whether the user was scrolling vertically for the last few seconds.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.IsScrollingHorizontally">
            <summary>
            Gets or sets information whether the user was scrolling horizontally for the last few seconds.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.MinimalChange">
            <summary>
            Gets or sets the value required for the scroll to show automatically.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.DynamicScrollViewer.Timeout">
            <summary>
            Gets or sets time after which the scroll is to be hidden.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.DynamicScrollViewer.OnScrollChanged(System.Windows.Controls.ScrollChangedEventArgs)">
            <summary>
            OnScrollChanged is an override called whenever scrolling state changes on this <see cref="T:Wpf.Ui.Controls.DynamicScrollViewer"/>.
            </summary>
            <remarks>
            OnScrollChanged fires the ScrollChangedEvent. Overriders of this method should call
            base.OnScrollChanged(args) if they want the event to be fired.
            </remarks>
            <param name="e">ScrollChangedEventArgs containing information about the change in scrolling state.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.Flyout">
            <summary>
            Control that displays a flying element that can, for example, contain tips.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.FontIcon">
            <summary>
            Represents a text element containing an icon glyph with selectable font family.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.FontIcon.GlyphProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.FontIcon.Glyph"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.FontIcon.Glyph">
            <summary>
            Gets or sets displayed <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Hyperlink">
            <summary>
            Button that opens a URL in a web browser.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Hyperlink.NavigateUriProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Hyperlink.NavigateUri"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Hyperlink.NavigateUri">
            <summary>
            The URL (or application shortcut) to open.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Hyperlink.#ctor">
            <summary>
            Action triggered when the button is clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.IAppearanceControl">
            <summary>
            UI <see cref="T:System.Windows.Controls.Control"/> with <see cref="T:Wpf.Ui.Common.ControlAppearance"/> attributes.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.IAppearanceControl.Appearance">
            <summary>
            Gets or sets the <see cref="P:Wpf.Ui.Controls.Interfaces.IAppearanceControl.Appearance"/> of the control, if available.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.IDpiAwareControl">
            <summary>
            The control that should react to changes in the screen DPI.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.IIconControl">
            <summary>
            UI <see cref="T:System.Windows.Controls.Control"/> with <see cref="T:Wpf.Ui.Common.SymbolRegular"/> attributes.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.IIconControl.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.IIconControl.IconFilled">
            <summary>
            Defines whether or not we should use the <see cref="T:Wpf.Ui.Common.SymbolFilled"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.IIconControl.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.INavigation">
            <summary>
            Represents navigation class.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.PageService">
            <summary>
            Service providing views.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.SelectedPageIndex">
            <summary>
            Navigation item ID of the current page.
            <para>If set to a value less than <see langword="0"/>, no <see cref="T:System.Windows.Controls.Page"/> will be loaded during <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> initialization.</para>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.PreviousPageIndex">
            <summary>
            Navigation item ID of the previous page.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.Precache">
            <summary>
            Creates an instance of all pages defined with <see cref="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageType"/> after the <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> is loaded.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.Current">
            <summary>
            Currently used item like <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Controls.Frame"/> in which the <see cref="T:System.Windows.Controls.Page"/> will be loaded after navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.Items">
            <summary>
            Gets or sets the list of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationControl"/> that will be displayed on the navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer">
            <summary>
            Gets or sets the list of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationControl"/> which will be displayed at the bottom of the navigation and will not be scrolled.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Interfaces.INavigation.Navigated">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.RoutedNavigationEvent"/> that will be triggered during navigation.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Interfaces.INavigation.NavigatedForward">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.RoutedNavigationEvent"/> that will be triggered during forward navigation.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Interfaces.INavigation.NavigatedBackward">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.RoutedNavigationEvent"/> that will be triggered during backward navigation.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.TransitionDuration">
            <summary>
            Gets or sets a value deciding how long the effect of the transition between the pages should take.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigation.TransitionType">
            <summary>
            Gets or sets type of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> transitions during navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Flush">
            <summary>
            Clears all navigation items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.ClearCache">
            <summary>
            Clears all initialized instances of the pages.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.Type)">
            <summary>
            Navigates to the page using the <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageType">Type of the page to navigate.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.Type,System.Object)">
            <summary>
            Navigates to the page using the <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageType">Type of the page to navigate.</param>
            <param name="dataContext">When an <see cref="T:System.Windows.Controls.Page"/> DataContext changes, all data-bound properties (on this element or any other element) whose Bindings use this DataContext will change to reflect the new value.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.Int32)">
            <summary>
            Loads a <see cref="T:System.Windows.Controls.Page"/> instance into <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> based on the tag of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>.
            </summary>
            <param name="pageIndex">ID of the page to be loaded.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.Int32,System.Object)">
            <summary>
            Loads a <see cref="T:System.Windows.Controls.Page"/> instance into <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> based on the tag of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>.
            </summary>
            <param name="pageIndex">ID of the page to be loaded.</param>
            <param name="dataContext">When an <see cref="T:System.Windows.Controls.Page"/> DataContext changes, all data-bound properties (on this element or any other element) whose Bindings use this DataContext will change to reflect the new value.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.String)">
            <summary>
            Loads a <see cref="T:System.Windows.Controls.Page"/> instance into <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> based on the tag of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>.
            </summary>
            <param name="pageTag"><see cref="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageTag"/> to be loaded.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.String,System.Object)">
            <summary>
            Loads a <see cref="T:System.Windows.Controls.Page"/> instance into <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> based on the tag of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>.
            </summary>
            <param name="pageTag"><see cref="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageTag"/> to be loaded.</param>
            <param name="dataContext">When an <see cref="T:System.Windows.Controls.Page"/> DataContext changes, all data-bound properties (on this element or any other element) whose Bindings use this DataContext will change to reflect the new value.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.NavigateExternal(System.Object)">
            <summary>
            Navigate to the given object that is outside the current navigation.
            </summary>
            <param name="frameworkElement">The element you want to navigate to a <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> that is not in the <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Items"/> or <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer"/> pool.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.NavigateExternal(System.Object,System.Object)">
            <summary>
            Navigate to the given object that is outside the current navigation.
            </summary>
            <param name="frameworkElement">The element you want to navigate to a <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> that is not in the <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Items"/> or <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer"/> pool.</param>
            <param name="dataContext">Context of the data for data binding.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.NavigateExternal(System.Uri)">
            <summary>
            Navigate to the given <see cref="T:System.Uri"/> that is outside the current navigation.
            </summary>
            <param name="absolutePageUri"><see cref="T:System.Uri"/> to the element you want to navigate to a <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> that is not in the <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Items"/> or <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer"/> pool.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.NavigateExternal(System.Uri,System.Object)">
            <summary>
            Navigate to the given <see cref="T:System.Uri"/> that is outside the current navigation.
            </summary>
            <param name="absolutePageUri"><see cref="T:System.Uri"/> to the element you want to navigate to a <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Frame"/> that is not in the <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Items"/> or <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer"/> pool.</param>
            <param name="dataContext">Context of the data for data binding.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.SetContext(System.Int32,System.Object)">
            <summary>
            Sets <see cref="P:System.Windows.FrameworkElement.DataContext"/> of the page.
            <para>If the page is not in the Cache, and is defined based on <see cref="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageType"/>, its object will be created and then its DataContext will be defined.</para>
            </summary>
            <param name="pageId">Id of the page from <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Items"/> or <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer"/>.</param>
            <param name="dataContext">Context of the data for data binding.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.SetContext(System.String,System.Object)">
            <summary>
            Sets <see cref="P:System.Windows.FrameworkElement.DataContext"/> of the page.
            <para>If the page is not in the Cache, and is defined based on <see cref="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageType"/>, its object will be created and then its DataContext will be defined.</para>
            </summary>
            <param name="pageTag">Tag of the page from <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Items"/> or <see cref="P:Wpf.Ui.Controls.Interfaces.INavigation.Footer"/>.</param>
            <param name="dataContext">Context of the data for data binding.</param>
            <returns><see langword="true"/> if the operation was successful.</returns>
        </member>
        <member name="M:Wpf.Ui.Controls.Interfaces.INavigation.SetCurrentContext(System.Object)">
            <summary>
            Tires to set the DataContext for the currently displayed page.
            </summary>
            <param name="dataContext">Data context to be set.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.INavigationControl">
            <summary>
            An interface element that can be part of a navigation list.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.INavigationItem">
            <summary>
            Navigation element.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageTag">
            <summary>
            Represents a text page identifier that can be navigated with <see cref="M:Wpf.Ui.Controls.Interfaces.INavigation.Navigate(System.String,System.Object)"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.Content">
            <summary>
            Content is the data used to generate the child elements of this control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.IsActive">
            <summary>
            Gets information whether the current element is active.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.Cache">
            <summary>
            Determines whether an <see cref="T:System.Windows.Controls.Page"/> should be cached.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageSource">
            <summary>
            URI of the application or content being navigated to.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageType">
            <summary>
            A <see cref="T:System.Type"/> inherited from <see cref="T:System.Windows.Controls.Page"/> that defines page of the item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.INavigationItem.AbsolutePageSource">
            <summary>
            Absolute path to the <see cref="T:System.Windows.Controls.Page"/> XAML template based on <see cref="P:Wpf.Ui.Controls.Interfaces.INavigationItem.PageSource"/> and <see cref="P:System.Windows.Markup.IUriContext.BaseUri"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Interfaces.INavigationItem.Click">
            <summary>
            Add / Remove ClickEvent handler
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Interfaces.IThemeControl">
            <summary>
            Control changing its properties or appearance depending on the theme.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Interfaces.IThemeControl.Theme">
            <summary>
            The theme is currently set.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.LoadingScreen">
            <summary>
            Prestyled loading screen with <see cref="T:Wpf.Ui.Controls.ProgressRing"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.MenuItem">
            <summary>
            Extended <see cref="T:System.Windows.Controls.MenuItem"/> with <see cref="T:Wpf.Ui.Common.SymbolRegular"/> properties.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MenuItem.SymbolIconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MenuItem.SymbolIcon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MenuItem.SymbolIconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MenuItem.SymbolIconFilled"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MenuItem.SymbolIcon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MenuItem.SymbolIconFilled">
            <summary>
            Defines whether or not we should use the <see cref="T:Wpf.Ui.Common.SymbolFilled"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.MessageBox">
            <summary>
            Customized window for notifications.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.FooterProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.Footer"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ShowFooterProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.ShowFooter"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ShowTitleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.ShowTitle"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.MicaEnabledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.MicaEnabled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ButtonLeftNameProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.ButtonLeftName"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ButtonLeftAppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.ButtonLeftAppearance"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ButtonLeftClickEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.MessageBox.ButtonLeftClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ButtonRightNameProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.ButtonRightName"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ButtonRightAppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.ButtonRightAppearance"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.ButtonRightClickEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.MessageBox.ButtonRightClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.MessageBox.TemplateButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.MessageBox.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.Footer">
            <summary>
            Gets or sets a content of the <see cref="T:Wpf.Ui.Controls.MessageBox"/> bottom element.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ShowFooter">
            <summary>
            Gets or sets a value that determines whether to show the <see cref="P:Wpf.Ui.Controls.MessageBox.Footer"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ShowTitle">
            <summary>
            Gets or sets a value that determines whether to show the <see cref="P:System.Windows.Window.Title"/> in <see cref="T:Wpf.Ui.Controls.TitleBar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.MicaEnabled">
            <summary>
            Gets or sets a value that determines whether <see cref="T:Wpf.Ui.Controls.MessageBox"/> should contain a <see cref="F:Wpf.Ui.Appearance.BackgroundType.Mica"/> effect.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ButtonLeftName">
            <summary>
            Name of the button on the left side of footer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ButtonLeftAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.ControlAppearance"/> of the button on the left, if available.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.MessageBox.ButtonLeftClick">
            <summary>
            Action triggered after clicking left button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ButtonRightName">
            <summary>
            Name of the button on the right side of footer.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.ButtonRightAppearance">
            <summary>
            Gets or sets the <see cref="T:Wpf.Ui.Common.ControlAppearance"/> of the button on the right, if available.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.MessageBox.ButtonRightClick">
            <summary>
            Action triggered after clicking right button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.MessageBox.TemplateButtonCommand">
            <summary>
            Command triggered after clicking the button on the Footer.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.#ctor">
            <summary>
            Creates new instance and sets default <see cref="E:System.Windows.FrameworkElement.Loaded"/> event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.Show">
            Shows a <see cref="T:System.Windows.MessageBox"/>.
        </member>
        <member name="M:Wpf.Ui.Controls.MessageBox.Show(System.String,System.Object)">
            <summary>
            Sets <see cref="P:System.Windows.Window.Title"/> and content of <see cref="T:System.Windows.Window"/>, then calls <see cref="M:Wpf.Ui.Controls.MessageBox.Show"/>.
            </summary>
            <param name="title"><see cref="P:System.Windows.Window.Title"/></param>
            <param name="content">Content of <see cref="T:System.Windows.Window"/></param>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationCompact">
            <summary>
            Modern navigation styled similar to the Task Manager in Windows 11.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationCompact.IsExpandedProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationCompact.IsExpanded"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationCompact.TemplateButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationCompact.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationCompact.IsExpanded">
            <summary>
            Gets or sets a value indicating whether the menu is expanded.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationCompact.TemplateButtonCommand">
            <summary>
            Command triggered after clicking the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationCompact.#ctor">
            <summary>
            Creates new instance and sets default <see cref="F:Wpf.Ui.Controls.NavigationCompact.TemplateButtonCommandProperty"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationFluent">
            <summary>
            Modern navigation styled according to the principles of Fluent Design for Windows 11.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationHeader.TextProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationHeader.Text"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationHeader.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationHeader.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationHeader.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationHeader.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationHeader.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationHeader.IconForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationHeader.IconSizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationHeader.IconSize"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationHeader.Text">
            <summary>
            Text presented in the header element.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationHeader.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationHeader.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationHeader.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationHeader.IconSize">
            <summary>
            Font size of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationItem">
            <summary>
            Navigation element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.PageTagProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.PageTag"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.PageSourceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.PageSource"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.PageTypeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.PageType"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.IsActiveProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.IsActive"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.CacheProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.Cache"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.IconSizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.IconSize"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.IconForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.ImageProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NavigationItem.Image"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.ActivatedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.NavigationItem.Activated"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NavigationItem.DeactivatedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.NavigationItem.Deactivated"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.PageTag">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.PageSource">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.PageType">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.IsActive">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.Cache">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.IconSize">
            <summary>
            Size of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.Image">
            <summary>
            Gets or sets image displayed next to the card name instead of the icon.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationItem.Activated">
            <summary>
            Occurs when <see cref="T:Wpf.Ui.Controls.NavigationItem"/> is activated via <see cref="P:Wpf.Ui.Controls.NavigationItem.IsActive"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NavigationItem.Deactivated">
            <summary>
            Occurs when <see cref="T:Wpf.Ui.Controls.NavigationItem"/> is deactivated via <see cref="P:Wpf.Ui.Controls.NavigationItem.IsActive"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.AbsolutePageSource">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.System#Windows#Markup#IUriContext#BaseUri">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NavigationItem.BaseUri">
            <summary>
            Implementation for BaseUri.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationItem.OnContentChanged(System.Object,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationItem.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationItem.OnPageSourceChanged(System.Uri)">
            <summary>
            This virtual method is called when <see cref="T:System.Uri"/> of the selected page is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationItem.OnPageTypeChanged(System.Type)">
            <summary>
            This virtual method is called when <see cref="T:System.Type"/> of the selected page is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NavigationItem.ResolvePageUri(System.Uri)">
            <summary>
            Tries to resolve absolute path to the Page template.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NavigationStore">
            <summary>
            Modern navigation styled according to the principles of Fluent Design for Windows 11.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Navigation.NavigationBase">
            <summary>
            Base implementation for the navigation view.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase._navigationService">
            <summary>
            Service used for navigation purposes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.ItemsProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Items"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.FooterProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Footer"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.FrameProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Frame"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.TransitionDurationProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.TransitionDuration"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.TransitionTypeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.TransitionType"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.SelectedPageIndexProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.SelectedPageIndex"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.PrecacheProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Precache"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.NavigationParentProperty">
            <summary>
            Attached property for <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>'s to get its parent.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.Items">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.Footer">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.TransitionDuration">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.TransitionType">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.Frame">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.SelectedPageIndex">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.Precache">
            <inheritdoc/>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Navigation.NavigationBase"/> navigate to page.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Navigation.NavigationBase.Navigated">
            <inheritdoc/>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedForwardEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Navigation.NavigationBase"/> navigate to the next page.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedForward">
            <inheritdoc/>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedBackwardEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Navigation.NavigationBase"/> navigate to the previous page.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedBackward">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.PageService">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.PreviousPageIndex">
            <inheritdoc/>
        </member>
        <member name="P:Wpf.Ui.Controls.Navigation.NavigationBase.Current">
            <inheritdoc/>
        </member>
        <member name="F:Wpf.Ui.Controls.Navigation.NavigationBase.History">
            <summary>
            Navigation history containing pages tags.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.#cctor">
            <summary>
            Static constructor overriding default properties.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.#ctor">
            <summary>
            Prepares base navigation properties.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.InitializeBase">
            <summary>
            Initializes internal properties.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Navigate(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Navigate(System.Type,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Navigate(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Navigate(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Navigate(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Navigate(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.NavigateExternal(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.NavigateExternal(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.NavigateExternal(System.Uri)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.NavigateExternal(System.Uri,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.SetCurrentContext(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.SetContext(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.SetContext(System.Int32,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.Flush">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.ClearCache">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.UpdateItems">
            <summary>
            Updates <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Current"/> property and modifies Active attribute of navigation items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> is loaded.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnKeyDown(System.Windows.Input.KeyEventArgs)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnNavigated">
            <summary>
            This virtual method is called during any navigation and it raises the <see cref="E:Wpf.Ui.Controls.Navigation.NavigationBase.Navigated"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnNavigatedForward">
            <summary>
            This virtual method is called during forward navigation and it raises the <see cref="E:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedForward"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnNavigatedBackward">
            <summary>
            This virtual method is called during backward navigation and it raises the <see cref="E:Wpf.Ui.Controls.Navigation.NavigationBase.NavigatedBackward"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnNavigationItemClicked(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            This virtual method is called when one of the navigation items is clicked.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnNavigationCollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            This virtual method is called when something is added, deleted or changed in <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Items"/> or <see cref="P:Wpf.Ui.Controls.Navigation.NavigationBase.Footer"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnItemsChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Triggered when <see cref="F:Wpf.Ui.Controls.Navigation.NavigationBase.ItemsProperty"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnFooterChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Triggered when <see cref="F:Wpf.Ui.Controls.Navigation.NavigationBase.FooterProperty"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnFrameChanged(System.Windows.Controls.Frame)">
            <summary>
            This virtual method is called when one of the navigation items is clicked.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.OnFrameChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Triggered when <see cref="F:Wpf.Ui.Controls.Navigation.NavigationBase.FrameProperty"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Navigation.NavigationBase.GetNavigationParent``1(``0)">
            <summary>
            Gets the <see cref="N:Wpf.Ui.Controls.Navigation"/> parent view for its <see cref="T:Wpf.Ui.Controls.NavigationItem"/> children.
            </summary>
            <param name="navigationItem"></param>
            <returns></returns>
        </member>
        <member name="T:Wpf.Ui.Controls.NotifyIcon">
            <summary>
            Represents the implementation of icon in the tray menu as <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.Disposed">
            <summary>
            Whether the control is disposed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.ShellIconData">
            <summary>
            Provides a set of information for Shell32 to manipulate the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.Id">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.Attached">
            <summary>
            Whether the control is attached to the shell.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.IsRegistered">
            <summary>
            Whether the icon is  registered in the tray menu.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.HookWindow">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.ParentHandle">
            <inheritdoc />
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.TooltipTextProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NotifyIcon.TooltipText"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.FocusOnLeftClickProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NotifyIcon.FocusOnLeftClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.MenuOnRightClickProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NotifyIcon.MenuOnRightClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NotifyIcon.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.MenuProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NotifyIcon.Menu"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.MenuFontSizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NotifyIcon.MenuFontSize"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.TooltipText">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.MenuOnRightClick">
            <summary>
            Gets or sets the value indicating whether to show the <see cref="P:Wpf.Ui.Controls.NotifyIcon.Menu"/> on single right click.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.FocusOnLeftClick">
            <summary>
            Gets or sets the value indicating whether to focus the <see cref="P:System.Windows.Application.MainWindow"/> on single left click.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.NotifyIcon.Menu">
            <summary>
            Context menu.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.LeftClickEvent">
            <summary>
            Registration for <see cref="E:Wpf.Ui.Controls.NotifyIcon.LeftClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.LeftDoubleClickEvent">
            <summary>
            Registration for <see cref="E:Wpf.Ui.Controls.NotifyIcon.LeftDoubleClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.RightClickEvent">
            <summary>
            Registration for <see cref="E:Wpf.Ui.Controls.NotifyIcon.RightClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.RightDoubleClickEvent">
            <summary>
            Registration for <see cref="E:Wpf.Ui.Controls.NotifyIcon.RightDoubleClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.MiddleClickEvent">
            <summary>
            Registration for <see cref="E:Wpf.Ui.Controls.NotifyIcon.MiddleClick"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NotifyIcon.MiddleDoubleClickEvent">
            <summary>
            Registration for <see cref="E:Wpf.Ui.Controls.NotifyIcon.MiddleDoubleClick"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NotifyIcon.LeftClick">
            <summary>
            Triggered when the user left-clicks on the <see cref="T:Wpf.Ui.Tray.INotifyIcon"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NotifyIcon.LeftDoubleClick">
            <summary>
            Triggered when the user double-clicks the <see cref="T:Wpf.Ui.Tray.INotifyIcon"/> with the left mouse button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NotifyIcon.RightClick">
            <summary>
            Triggered when the user right-clicks on the <see cref="T:Wpf.Ui.Tray.INotifyIcon"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NotifyIcon.RightDoubleClick">
            <summary>
            Triggered when the user double-clicks the <see cref="T:Wpf.Ui.Tray.INotifyIcon"/> with the right mouse button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NotifyIcon.MiddleClick">
            <summary>
            Triggered when the user middle-clicks on the <see cref="T:Wpf.Ui.Tray.INotifyIcon"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NotifyIcon.MiddleDoubleClick">
            <summary>
            Triggered when the user double-clicks the <see cref="T:Wpf.Ui.Tray.INotifyIcon"/> with the middle mouse button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.Finalize">
            <summary>
            Control finalizer.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.Register">
            <summary>
            Tries to register the <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> in the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.Unregister">
            <summary>
            Tries to unregister the <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> from the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.ShowMenu">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.FocusApp">
            <summary>
            Tries to focus the <see cref="P:System.Windows.Application.MainWindow"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnRender(System.Windows.Media.DrawingContext)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnLeftClick">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> is left-clicked and it raises the <see cref="E:Wpf.Ui.Controls.NotifyIcon.LeftClick"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnLeftDoubleClick">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> is left-clicked and it raises the <see cref="E:Wpf.Ui.Controls.NotifyIcon.LeftDoubleClick"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnRightClick">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> is left-clicked and it raises the <see cref="E:Wpf.Ui.Controls.NotifyIcon.RightClick"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnRightDoubleClick">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> is left-clicked and it raises the <see cref="E:Wpf.Ui.Controls.NotifyIcon.RightDoubleClick"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnMiddleClick">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> is left-clicked and it raises the <see cref="E:Wpf.Ui.Controls.NotifyIcon.MiddleClick"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.OnMiddleDoubleClick">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> is left-clicked and it raises the <see cref="E:Wpf.Ui.Controls.NotifyIcon.MiddleDoubleClick"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.Dispose(System.Boolean)">
            <summary>
            If disposing equals <see langword="true"/>, the method has been called directly or indirectly
            by a user's code. Managed and unmanaged resources can be disposed. If disposing equals <see langword="false"/>,
            the method has been called by the runtime from inside the finalizer and you should not
            reference other objects.
            <para>Only unmanaged resources can be disposed.</para>
            </summary>
            <param name="disposing">If disposing equals <see langword="true"/>, dispose all managed and unmanaged resources.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.NotifyIcon.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            A callback function that processes messages sent to a window.
            The WNDPROC type defines a pointer to this callback function.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.NumberBox">
            <summary>
            Text field for entering numbers with the possibility of specifying a pattern.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox._decimalExpression">
            <summary>
            Accepts a string of digits separated by a comma or period. Allows for a leading minus sign.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox._integerExpression">
            <summary>
            Accepts a string of digits only. Allows for a leading minus sign.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.ValueProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.StepProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.Step"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.MaxProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.Max"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.MinProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.Min"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.DecimalPlacesProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.DecimalPlaces"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.MaskProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.Mask"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.SpinButtonsEnabledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.SpinButtonsEnabled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.IntegersOnlyProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.NumberBox.IntegersOnly"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.IncrementedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.NumberBox.Incremented"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.NumberBox.DecrementedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.NumberBox.Decremented"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.AcceptsReturn">
            <summary>
            <see cref="T:Wpf.Ui.Controls.NumberBox"/> does no accept returns.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.MaxLines">
            <summary>
            <see cref="T:Wpf.Ui.Controls.NumberBox"/> does not accept changes to the number of lines.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.MinLines">
            <summary>
            <see cref="T:Wpf.Ui.Controls.NumberBox"/> does not accept changes to the number of lines.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Value">
            <summary>
            Current numeric value.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Step">
            <summary>
            Gets or sets value by which the given number will be increased or decreased after pressing the button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Max">
            <summary>
            Maximum allowable value.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Min">
            <summary>
            Minimum allowable value.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.DecimalPlaces">
            <summary>
            Number of decimal places.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.Mask">
            <summary>
            Gets or sets numbers pattern.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.SpinButtonsEnabled">
            <summary>
            Gets or sets value determining whether to display the button controls.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.NumberBox.IntegersOnly">
            <summary>
            Gets or sets value which determines whether only integers can be entered.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NumberBox.Incremented">
            <summary>
            Event occurs when a value is incremented by button or arrow key.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.NumberBox.Decremented">
            <summary>
            Event occurs when a value is decremented by button or arrow key.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.#ctor">
            <summary>
            Creates new instance of <see cref="T:Wpf.Ui.Controls.NumberBox"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnTemplateButtonClick(System.Object,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.UpdateValue(System.Double,System.Boolean)">
            <summary>
            Updates <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> and <see cref="P:System.Windows.Controls.TextBox.Text"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.UpdateValue(System.Double,System.String)">
            <summary>
            Updates <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/> and <see cref="P:System.Windows.Controls.TextBox.Text"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.IncrementValue">
            <summary>
            Increments current <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.DecrementValue">
            <summary>
            Decrements current <see cref="P:Wpf.Ui.Controls.NumberBox.Value"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.FormatDoubleToString(System.Double)">
            <summary>
            Formats double number according to configuration.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.IsNumberTextValid(System.String)">
            <summary>
            Tests provided text with regular expression according to configuration.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.FormatWithMask(System.String,System.String)">
            <summary>
            Tries to format provided string according to the mask.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.ParseStringToDouble(System.String)">
            <summary>
            Tries to parse provided string to double with invariant culture.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnLoaded(System.Object,System.Windows.RoutedEventArgs)">
            <summary>
            Occurs when controls is loaded.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnKeyUp(System.Windows.Input.KeyEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnIncremented">
            <summary>
            This virtual method is called after incrementing a value using button or arrow key.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnDecremented">
            <summary>
            This virtual method is called after decrementing a value using button or arrow key.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.NumberBox.OnDecimalPlacesChanged(System.Int32)">
            <summary>
            This virtual method is called after <see cref="P:Wpf.Ui.Controls.NumberBox.DecimalPlaces"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.PasswordBox">
            TextProperty contains asterisks OR raw password if IsPasswordRevealed is set to true
            PasswordProperty always contains raw password
            <summary>
            The modified password control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox._takenControl">
            <summary>
            Blocks triggering overwrite when forced text editing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.PasswordProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.PasswordBox.Password"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.PasswordCharProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.PasswordBox.PasswordChar"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.IsPasswordRevealedProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.PasswordBox.IsPasswordRevealed"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.PasswordBox.RevealButtonEnabledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.PasswordBox.RevealButtonEnabled"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.AcceptsReturn">
            <summary>
            <see cref="T:Wpf.Ui.Controls.PasswordBox"/> does no accept returns.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.MaxLines">
            <summary>
            <see cref="T:Wpf.Ui.Controls.PasswordBox"/> does not accept changes to the number of lines.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.MinLines">
            <summary>
            <see cref="T:Wpf.Ui.Controls.PasswordBox"/> does not accept changes to the number of lines.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.Password">
            <summary>
            Gets or sets currently typed text represented by asterisks.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.PasswordChar">
            <summary>
            Gets or sets character used to mask the password.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.IsPasswordRevealed">
            <summary>
            Gets a value indicating whether the password is revealed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.RevealButtonEnabled">
            <summary>
            Gets or sets a value deciding whether to display the reveal password button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.PasswordBox.Text">
            <summary>
            Contents of the TextBox. Returns asterisks, if you want a valid password use <see cref="P:Wpf.Ui.Controls.PasswordBox.Password"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <summary>
            Called when content changes.
            <para>Partially inspired by Leonardo T. implementation of SecureWpfLogOn.</para>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.UpdatePasswordWithNewChar(System.Char)">
            <summary>
            Updates the content of the displayed password if the character is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.UpdateRevealIfPossible(System.Boolean)">
            <summary>
            Change the display of the password if rules are supported.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnTemplateButtonClick(System.Object,System.Object)">
            <summary>
            Triggered by clicking a button in the control template.
            </summary>
            <param name="sender">Sender of the click event.</param>
            <param name="parameter">Additional parameters.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnPasswordCharChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Static method that is called if the character is changed in the during the run.
            </summary>
            <param name="d">Instance of the <see cref="T:Wpf.Ui.Controls.PasswordBox"/></param>
            <param name="e">Various property events.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.PasswordBox.OnPasswordRevealModeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Static method that is called if the reveal mode is changed in the during the run.
            </summary>
            <param name="d">Instance of the <see cref="T:Wpf.Ui.Controls.PasswordBox"/></param>
            <param name="e">Various property events.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.ProgressRing">
            <summary>
            Rotating loading ring.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.ProgressProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ProgressRing.Progress"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.IsIndeterminateProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ProgressRing.IsIndeterminate"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.EngAngleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ProgressRing.EngAngle"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.IndeterminateAngleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ProgressRing.IndeterminateAngle"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.CoverRingStrokeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ProgressRing.CoverRingStroke"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ProgressRing.CoverRingVisibilityProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ProgressRing.CoverRingVisibility"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.Progress">
            <summary>
            Gets or sets the progress.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.IsIndeterminate">
            <summary>
            Determines if <see cref="T:Wpf.Ui.Controls.ProgressRing"/> shows actual values (<see langword="false"/>)
            or generic, continuous progress feedback (<see langword="true"/>).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.EngAngle">
            <summary>
            Gets or sets the <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.IndeterminateAngle">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/> when <see cref="P:Wpf.Ui.Controls.ProgressRing.IsIndeterminate"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.CoverRingStroke">
            <summary>
            Background ring fill.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ProgressRing.CoverRingVisibility">
            <summary>
            Background ring visibility.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ProgressRing.UpdateProgressAngle">
            <summary>
            Re-draws <see cref="P:Wpf.Ui.Controls.Arc.EndAngle"/> depending on <see cref="P:Wpf.Ui.Controls.ProgressRing.Progress"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ProgressRing.PropertyChangedCallback(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Validates the entered <see cref="P:Wpf.Ui.Controls.ProgressRing.Progress"/> and redraws the <see cref="T:Wpf.Ui.Controls.Arc"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeQuality.L">
            <summary>
            Recovers 7% of data
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeQuality.M">
            <summary>
            Recovers 15% of data
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeQuality.Q">
            <summary>
            Recovers 25% of data
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeQuality.H">
            <summary>
            Recovers 30% of data
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeEncoding.Auto">
            <summary>
            Chooses automatically.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeEncoding.Numeric">
            <summary>
            7089 characters
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeEncoding.Alphanumeric">
            <summary>
            4296 characters
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeEncoding.Byte">
            <summary>
            2953 characters
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCodeEncoding.Kanji">
            <summary>
            1817 characters
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.QrCode">
            <summary>
            <see href="https://www.qrcode.com/en/about/standards.html">https://www.qrcode.com/en/about/standards.html</see>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCode.QualityProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.QrCode.Quality"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCode.EncodingProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.QrCode.Encoding"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.QrCode.TypeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.QrCode.Type"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.QrCode.Quality">
            <summary>
            Gets or sets the QR Code error correction level.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.QrCode.Encoding">
            <summary>
            Gets or sets the QR Code encoding.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.QrCode.Type">
            <summary>
            Gets or sets the QR Code generation type.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Rating">
            <summary>
            Displays the rating scale with interactions.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Rating.ValueProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Rating.Value"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Rating.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Rating.Icon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Rating.Value">
            <summary>
            User rating.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Rating.Icon">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.Snackbar">
            <summary>
            Small card with buttons displayed at the bottom for a short time.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IsShownProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.IsShown"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.TimeoutProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.Timeout"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.IconForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.IconForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.TitleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.Title"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.MessageProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.Message"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.MessageForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.MessageForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.AppearanceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.Appearance"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.ShowCloseButtonProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.ShowCloseButton"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.SlideTransformProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.SlideTransform"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.ButtonCloseCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.Snackbar.ButtonCloseCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.IsShown">
            <summary>
            Gets or sets information whether the snackbar should be displayed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Timeout">
            <summary>
            Time for which the snackbar is to be displayed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.IconForeground">
            <summary>
            Foreground of the <see cref="T:Wpf.Ui.Controls.SymbolIcon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Title">
            <summary>
            Gets or sets the text displayed on the top of the snackbar.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Message">
            <summary>
            Gets or sets the text displayed on the bottom of the snackbar.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.MessageForeground">
            <summary>
            Foreground of the <see cref="P:Wpf.Ui.Controls.Snackbar.Message"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.Appearance">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.ShowCloseButton">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:Wpf.Ui.Controls.Snackbar"/> close button should be visible.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.SlideTransform">
            <summary>
            Gets or sets the transform.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.Snackbar.ButtonCloseCommand">
            <summary>
            Gets the <see cref="T:Wpf.Ui.Common.RelayCommand"/> triggered after clicking close button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.OpenedEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Snackbar"/> opens.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Snackbar.Opened">
            <summary>
            Add / Remove <see cref="F:Wpf.Ui.Controls.Snackbar.OpenedEvent"/> handler.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.Snackbar.ClosedEvent">
            <summary>
            Event triggered when <see cref="T:Wpf.Ui.Controls.Snackbar"/> opens.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.Snackbar.Closed">
            <summary>
            Add / Remove <see cref="F:Wpf.Ui.Controls.Snackbar.ClosedEvent"/> handler.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.#ctor">
            <summary>
            Creates new instance and sets default <see cref="P:Wpf.Ui.Controls.Snackbar.ButtonCloseCommand"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Show">
            <summary>
            Shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/> for the amount of time specified in <see cref="P:Wpf.Ui.Controls.Snackbar.Timeout"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Show(System.String,System.String)">
            <summary>
            Sets <see cref="P:Wpf.Ui.Controls.Snackbar.Title"/> and <see cref="P:Wpf.Ui.Controls.Snackbar.Message"/>, then shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/> for the amount of time specified in <see cref="P:Wpf.Ui.Controls.Snackbar.Timeout"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.ShowAsync">
            <summary>
            Asynchronously shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/> for the amount of time specified in <see cref="P:Wpf.Ui.Controls.Snackbar.Timeout"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.ShowAsync(System.String,System.String)">
            <summary>
            Asynchronously sets <see cref="P:Wpf.Ui.Controls.Snackbar.Title"/> and <see cref="P:Wpf.Ui.Controls.Snackbar.Message"/>, then shows the <see cref="T:Wpf.Ui.Controls.Snackbar"/> for the amount of time specified in <see cref="P:Wpf.Ui.Controls.Snackbar.Timeout"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Hide">
            <summary>
            Hides <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.Hide(System.Int32)">
            <summary>
            Hides <see cref="T:Wpf.Ui.Controls.Snackbar"/> after provided timeout.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.HideAsync">
            <summary>
            Asynchronously hides <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.HideAsync(System.Int32)">
            <summary>
            Asynchronously ides <see cref="T:Wpf.Ui.Controls.Snackbar"/> after provided timeout.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.ShowComponentAsync(System.String,System.String)">
            <summary>
            This virtual method is called by <see cref="M:Wpf.Ui.Controls.Snackbar.Show"/> or <see cref="M:Wpf.Ui.Controls.Snackbar.ShowAsync"/> to reveal the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.HideComponentAsync(System.Int32)">
            <summary>
            This virtual method is called by <see cref="M:Wpf.Ui.Controls.Snackbar.Hide"/> or <see cref="M:Wpf.Ui.Controls.Snackbar.HideAsync"/> to collapse the <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.OnOpened">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Snackbar"/> is opening and it raises the <see cref="E:Wpf.Ui.Controls.Snackbar.Opened"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.Snackbar.OnClosed">
            <summary>
            This virtual method is called when <see cref="T:Wpf.Ui.Controls.Snackbar"/> is closing and it raises the <see cref="E:Wpf.Ui.Controls.Snackbar.Closed"/> <see langword="event"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SplitButton">
            <summary>
            The <see cref="T:Wpf.Ui.Controls.SplitButton"/> is a <see cref="T:Wpf.Ui.Controls.DropDownButton"/>, but with an addition execution hit target.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.States.ThumbRateState">
            <summary>
            States of the <see cref="T:Wpf.Ui.Controls.ThumbRate"/> control.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.States.ThumbRateState.None">
            <summary>
            No thumb has been clicked.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.States.ThumbRateState.Liked">
            <summary>
            The thumb up has been clicked.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.States.ThumbRateState.Disliked">
            <summary>
            The thumb down has been clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.SymbolIcon">
             <summary>
             Represents a text element containing an icon glyph.
             </summary>
            https://docs.microsoft.com/en-us/uwp/api/windows.ui.xaml.controls.symbolicon?view=winrt-22000
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIcon.SymbolProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.SymbolIcon.Symbol"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIcon.RawSymbolProperty">
            <summary>
            <see cref="T:System.String"/> property for <see cref="P:Wpf.Ui.Controls.SymbolIcon.RawSymbol"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.SymbolIcon.FilledProperty">
            <summary>
            <see cref="T:System.String"/> property for <see cref="P:Wpf.Ui.Controls.SymbolIcon.Filled"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIcon.Symbol">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIcon.RawSymbol">
            <summary>
            Gets or sets displayed <see cref="T:Wpf.Ui.Common.SymbolRegular"/> as <see langword="string"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.SymbolIcon.Filled">
            <summary>
            Defines whether or not we should use the <see cref="T:Wpf.Ui.Common.SymbolFilled"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TextBox">
            <summary>
            Extended <see cref="T:System.Windows.Controls.TextBox"/> with additional parameters like <see cref="P:Wpf.Ui.Controls.TextBox.PlaceholderText"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IconPlacementProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.IconPlacement"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IconFilledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.IconFilled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.IconForegroundProperty">
            <summary>
            DependencyProperty for <see cref="P:Wpf.Ui.Controls.TextBox.IconForeground" /> property.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.PlaceholderTextProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.PlaceholderText"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.PlaceholderEnabledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.PlaceholderEnabled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.ClearButtonEnabledProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.ClearButtonEnabled"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.ShowClearButtonProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.ShowClearButton"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TextBox.TemplateButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TextBox.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.Icon">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.IconPlacement">
            <summary>
            Defines which side the icon should be placed on.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.IconFilled">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.IconForeground">
            <summary>
            The Foreground property specifies the foreground brush of an element's <see cref="P:Wpf.Ui.Controls.TextBox.Icon"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.PlaceholderText">
            <summary>
            Gets or sets numbers pattern.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.PlaceholderEnabled">
            <summary>
            Gets or sets a value determining whether to display the placeholder.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.ClearButtonEnabled">
            <summary>
            Gets or sets a value determining whether to enable the clear button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.ShowClearButton">
            <summary>
            Gets or sets a value determining whether to show the clear button when <see cref="T:Wpf.Ui.Controls.TextBox"/> is focused.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TextBox.TemplateButtonCommand">
            <summary>
            Command triggered after clicking the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.#ctor">
            <summary>
            Creates a new instance and assigns default events.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnTextChanged(System.Windows.Controls.TextChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnGotFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnLostFocus(System.Windows.RoutedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TextBox.OnTemplateButtonClick(System.Object,System.Object)">
            <summary>
            Triggered by clicking a button in the control template.
            </summary>
            <param name="sender">Sender of the click event.</param>
            <param name="parameter">Additional parameters.</param>
        </member>
        <member name="T:Wpf.Ui.Controls.ThumbRate">
            <summary>
            Allows to rate positively or negatively by clicking on one of the thumbs.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRate.StateProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ThumbRate.State"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRate.StateChangedEvent">
            <summary>
            Event property for <see cref="E:Wpf.Ui.Controls.ThumbRate.StateChanged"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.ThumbRate.StateChanged">
            <summary>
            Occurs when <see cref="P:Wpf.Ui.Controls.ThumbRate.State"/> is changed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ThumbRate.State">
            <summary>
            Gets or sets the value determining the current state of the control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommand">
            <summary>
            Command triggered after clicking the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ThumbRate.#ctor">
            <summary>
            Creates new instance and attaches <see cref="P:Wpf.Ui.Controls.ThumbRate.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.ThumbRate.OnButtonClick(System.Object,System.Object)">
            <summary>
            Triggered by clicking a button in the control template.
            </summary>
            <param name="sender">Sender of the click event.</param>
            <param name="parameter">Additional parameters.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.ThumbRate.OnStateChanged(Wpf.Ui.Controls.States.ThumbRateState,Wpf.Ui.Controls.States.ThumbRateState)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.ThumbRate.State"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TitleBar">
            <summary>
            Custom navigation buttons for the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ThemeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.Theme"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.TitleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.Title"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.HeaderProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.Header"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ButtonsForegroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.ButtonsForeground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ButtonsBackgroundProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.ButtonsBackground"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.MinimizeToTrayProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.MinimizeToTray"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.UseSnapLayoutProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.UseSnapLayout"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.IsMaximizedProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.IsMaximized"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ForceShutdownProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.ForceShutdown"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowMaximizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.ShowMaximize"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowMinimizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.ShowMinimize"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.ShowHelpProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.ShowHelp"/>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.CanMaximizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.CanMaximize"/>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.IconProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.Icon"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.TrayProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.Tray"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.CloseClickedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.TitleBar.CloseClicked"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.MaximizeClickedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.TitleBar.MaximizeClicked"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.MinimizeClickedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.TitleBar.MinimizeClicked"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.HelpClickedEvent">
            <summary>
            Routed event for <see cref="E:Wpf.Ui.Controls.TitleBar.HelpClicked"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TitleBar.TemplateButtonCommandProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TitleBar.TemplateButtonCommand"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Theme">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Title">
            <summary>
            Gets or sets title displayed on the left.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Header">
            <summary>
            Gets or sets the content displayed in the <see cref="T:Wpf.Ui.Controls.TitleBar"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ButtonsForeground">
            <summary>
            Foreground of the navigation buttons.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ButtonsBackground">
            <summary>
            Background of the navigation buttons when hovered.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.MinimizeToTray">
            <summary>
            Gets or sets information whether to minimize the application to tray.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.UseSnapLayout">
            <summary>
            Gets or sets information whether the use Windows 11 Snap Layout.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.IsMaximized">
            <summary>
            Gets or sets information whether the current window is maximized.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ForceShutdown">
            <summary>
            Gets or sets information whether the controls affect main application window.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowMaximize">
            <summary>
            Gets or sets information whether to show maximize button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowMinimize">
            <summary>
            Gets or sets information whether to show minimize button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ShowHelp">
            <summary>
            Gets or sets information whether to show help button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.CanMaximize">
            <summary>
            Enables or disables the maximize functionality if disables the MaximizeActionOverride action won't be called
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Icon">
            <summary>
            Titlebar icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.Tray">
            <summary>
            Tray icon.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.CloseClicked">
            <summary>
            Event triggered after clicking close button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.MaximizeClicked">
            <summary>
            Event triggered after clicking maximize or restore button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.MinimizeClicked">
            <summary>
            Event triggered after clicking minimize button.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Controls.TitleBar.HelpClicked">
            <summary>
            Event triggered after clicking help button
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.TemplateButtonCommand">
            <summary>
            Command triggered after clicking the titlebar button.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.MaximizeActionOverride">
            <summary>
            Lets you override the behavior of the Maximize/Restore button with an <see cref="T:System.Action"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.MinimizeActionOverride">
            <summary>
            Lets you override the behavior of the Minimize button with an <see cref="T:System.Action"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TitleBar.ParentWindow">
            <summary>
            Window containing the TitleBar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.#ctor">
            <summary>
            Creates a new instance of the class and sets the default <see cref="E:System.Windows.FrameworkElement.Loaded"/> event.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnApplyTemplate">
            <summary>
            Invoked whenever application code or an internal process,
            such as a rebuilding layout pass, calls the ApplyTemplate method.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TitleBar.OnThemeChanged(Wpf.Ui.Appearance.ThemeType,System.Windows.Media.Color)">
            <summary>
            This virtual method is triggered when the app's theme changes.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.ToggleSwitch">
            <summary>
            Use <see cref="T:Wpf.Ui.Controls.ToggleSwitch"/> to present users with two mutally exclusive options (like on/off).
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeGrid">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeGrid.HeadersProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TreeGrid.Headers"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeGrid.Headers">
            <summary>
            Content is the data used to generate the child elements of this control.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeGridHeader">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeGridHeader.TitleProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TreeGridHeader.Title"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.TreeGridHeader.GroupProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.TreeGridHeader.Group"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeGridHeader.Title">
            <summary>
            Gets or sets the title that will be displayed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.TreeGridHeader.Group">
            <summary>
            Gets or sets the column group name.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.TreeGridHeader.OnTitleChanged">
            <summary>
            This virtual method is called when <see cref="!:Name"/> is changed.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.TreeGridItem">
            <summary>
            Work in progress.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.UiPage">
            <summary>
            Extended <see cref="T:System.Windows.Controls.Page"/> with WPF UI features. 
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.UiPage.ElementScrollViewer">
            <summary>
            Template element represented by the <c>PART_Popup</c> name.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.UiPage.ScrollableProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.UiPage.Scrollable"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.UiPage.ScrollHostProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.UiPage.ScrollHost"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiPage.Scrollable">
            <summary>
            Gets or sets a value determining whether the content should be scrollable.
            <para>If set, <see cref="T:Wpf.Ui.Controls.DynamicScrollViewer"/> will be added to the <see cref="P:System.Windows.Controls.Control.Template"/></para>
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiPage.ScrollHost">
            <summary>
            If the page is <see cref="P:Wpf.Ui.Controls.UiPage.Scrollable"/>, gets a <see cref="T:System.Windows.Controls.ScrollViewer"/> that container the <see cref="T:System.Windows.Controls.Page"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiPage.OnApplyTemplate">
            <summary>
            Invoked whenever application code or an internal process,
            such as a rebuilding layout pass, calls the ApplyTemplate method.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.UiWindow">
            <summary>
            Extended <see cref="T:System.Windows.Window"/> with WPF UI features.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiWindow.InteropHelper">
            <summary>
            Contains helper for accessing this window handle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiWindow.HwndSource">
            <summary>
            Container WPF presenter handle.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.UiWindow.ExtendsContentIntoTitleBarProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.UiWindow.ExtendsContentIntoTitleBar"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.UiWindow.WindowCornerPreferenceProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.UiWindow.WindowCornerPreference"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.UiWindow.WindowBackdropTypeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.UiWindow.WindowBackdropType"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiWindow.ExtendsContentIntoTitleBar">
            <summary>
            Gets or sets a value determining whether the <see cref="T:System.Windows.Window"/> content should be extended into title bar.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiWindow.WindowCornerPreference">
            <summary>
            Gets or sets a value determining corner preference for current <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.UiWindow.WindowBackdropType">
            <summary>
            Gets or sets a value determining preferred backdrop type for current <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.#ctor">
            <summary>
            Creates new instance and sets default style.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.#cctor">
            <summary>
            Overrides default properties.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnSourceInitialized(System.EventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnExtendsContentIntoTitleBarChanged(System.Boolean,System.Boolean)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.UiWindow.ExtendsContentIntoTitleBar"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnExtendsContentIntoTitleBarChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private <see cref="F:Wpf.Ui.Controls.UiWindow.ExtendsContentIntoTitleBarProperty"/> property callback.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnCornerPreferenceChanged(Wpf.Ui.Appearance.WindowCornerPreference,Wpf.Ui.Appearance.WindowCornerPreference)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.UiWindow.WindowCornerPreference"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnCornerPreferenceChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private <see cref="P:Wpf.Ui.Controls.UiWindow.WindowCornerPreference"/> property callback.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnBackdropTypeChanged(Wpf.Ui.Appearance.BackgroundType,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.UiWindow.WindowBackdropType"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.UiWindow.OnBackdropTypeChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private <see cref="P:Wpf.Ui.Controls.UiWindow.WindowBackdropType"/> property callback.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingGridView">
            <summary>
            Simple control that displays a gird of items. Depending on the orientation, the items are either stacked horizontally or vertically 
            until the items are wrapped to the next row or column. The control is using virtualization to support large amount of items.
            <para>In order to work properly all items must have the same size.</para>
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingGridView.OrientationProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingGridView.Orientation"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingGridView.SpacingModeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingGridView.SpacingMode"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingGridView.StretchItemsProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingGridView.StretchItems"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingGridView.Orientation">
            <summary>
            Gets or sets a value that specifies the orientation in which items are arranged. The default value is <see cref="F:System.Windows.Controls.Orientation.Vertical"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingGridView.SpacingMode">
            <summary>
            Gets or sets the spacing mode used when arranging the items. The default value is <see cref="F:Wpf.Ui.Common.SpacingMode.Uniform"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingGridView.StretchItems">
            <summary>
            Gets or sets a value that specifies if the items get stretched to fill up remaining space. The default value is false.
            </summary>
            <remarks>
            The MaxWidth and MaxHeight properties of the ItemContainerStyle can be used to limit the stretching. 
            In this case the use of the remaining space will be determined by the SpacingMode property. 
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingGridView.#ctor">
            <summary>
            Constructor initializing the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingGridView.InitializeItemsPanel">
            <summary>
            Initializes the <see cref="P:System.Windows.Controls.ItemsControl.ItemsPanel"/> with <see cref="T:Wpf.Ui.Controls.VirtualizingWrapPanel"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingItemsControl">
            <summary>
            Virtualized <see cref="T:System.Windows.Controls.ItemsControl"/>.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingItemsControl.CacheLengthUnitProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingItemsControl.CacheLengthUnit"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingItemsControl.CacheLengthUnit">
            <summary>
            Gets or sets the cache length unit.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingItemsControl.#ctor">
            <summary>
            Constructor that initialize the <see cref="T:System.Windows.Controls.VirtualizingPanel"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingPanelBase">
            <summary>
            Base abstract class for creating virtualized panels.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._itemsOwner">
            <summary>
            Owner of the displayed items.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._itemContainerGenerator">
            <summary>
            Items generator.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._previousVerticalScrollBarVisibility">
            <summary>
            Previously set visibility of the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase._previousHorizontalScrollBarVisibility">
            <summary>
            Previously set visibility of the horizontal scroll bar.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CanHierarchicallyScrollAndVirtualizeCore">
            <inheritdoc />
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollUnit">
            <summary>
            Gets the scroll unit.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelScrollDirection">
            <summary>
            The direction in which the panel scrolls when user turns the mouse wheel.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.IsVirtualizing">
            <summary>
            Gets a value that inidicates whether the virtualizing is enabled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.VirtualizationMode">
            <summary>
            Gets the virtualization mode.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.IsRecycling">
            <summary>
            Returns true if the panel is in VirtualizationMode.Recycling, otherwise false.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CacheLength">
            <summary>
            The cache length before and after the viewport. 
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CacheLengthUnit">
            <summary>
            The Unit of the cache length. Can be Pixel, Item or Page. 
            When the ItemsOwner is a group item it can only be pixel or item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemsControl">
            <summary>
            The ItemsControl (e.g. ListView).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemsOwner">
            <summary>
            The ItemsControl (e.g. ListView) or if the ItemsControl is grouping a GroupItem.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Items">
            <summary>
            Items collection.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Offset">
            <summary>
            Gets the offset.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemContainerGenerator">
            <summary>
            Items container.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ItemRange">
            <summary>
            Gets or sets the range of items that a realized in <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport"/> or cache.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport">
            <summary>
            Gets the viewport.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDelta"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDelta"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaItemProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaItem"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaItemProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaItem"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollOwner">
            <summary>
            Gets or sets the scroll owner.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CanVerticallyScroll">
            <summary>
            Gets or sets a value that indicates whether the content can be vertically scrolled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.CanHorizontallyScroll">
            <summary>
            Gets or sets a value that indicates whether the content can be horizontally scrolled.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDelta">
            <summary>
            Scroll line delta for pixel based scrolling. The default value is 16 dp.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDelta">
            <summary>
            Mouse wheel delta for pixel based scrolling. The default value is 48 dp.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollLineDeltaItem">
            <summary>
            Scroll line delta for item based scrolling. The default value is 1 item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDeltaItem">
            <summary>
            Mouse wheel delta for item based scrolling. The default value is 3 items.
            </summary> 
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ExtentWidth">
            <summary>
            Gets width of the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ExtentHeight">
            <summary>
            Gets height of the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Extent"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.HorizontalOffset">
            <summary>
            Gets the horizontal offset.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.VerticalOffset">
            <summary>
            Gets the vertical offset.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ViewportWidth">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport"/> width.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingPanelBase.ViewportHeight">
            <summary>
            Gets the <see cref="P:Wpf.Ui.Controls.VirtualizingPanelBase.Viewport"/> height.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MakeVisible(System.Windows.Media.Visual,System.Windows.Rect)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.SetVerticalOffset(System.Double)">
            <summary>
            Sets the vertical offset.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.SetHorizontalOffset(System.Double)">
            <summary>
            Sets the horizontal offset.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineUp">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineDown">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineLeft">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.LineRight">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelUp">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelDown">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelLeft">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MouseWheelRight">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageUp">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageDown">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageLeft">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.PageRight">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.OnItemsChanged(System.Object,System.Windows.Controls.Primitives.ItemsChangedEventArgs)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.UpdateScrollInfo(System.Windows.Size,System.Windows.Size)">
            <summary>
            Updates scroll offset, extent and viewport. 
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetItemIndexFromChildIndex(System.Int32)">
            <summary>
            Gets item index from the generator.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetGeneratorPositionFromChildIndex(System.Int32)">
            <summary>
            Gets the position of children from the generator.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.RealizeItems">
            <summary>
            Realizes visible and cached items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.VirtualizeItems">
            <summary>
            Virtualizes (cleanups) no longer visible or cached items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollVertical(System.Double)">
            <summary>
            Sets vertical scroll offset by given amount.
            </summary>
            <param name="amount">The value by which the offset is to be increased.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.ScrollHorizontal(System.Double)">
            <summary>
            Sets horizontal scroll offset by given amount.
            </summary>
            <param name="amount">The value by which the offset is to be increased.</param>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.CalculateExtent(System.Windows.Size)">
            <summary>
            Calculates the extent that would be needed to show all items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.UpdateItemRange">
            <summary>
            Calculates the item range that is visible in the viewport or cached.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineUpScrollAmount">
            <summary>
            Gets line up scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineDownScrollAmount">
            <summary>
            Gets line down scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineLeftScrollAmount">
            <summary>
            Gets line left scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetLineRightScrollAmount">
            <summary>
            Gets line right scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelUpScrollAmount">
            <summary>
            Gets mouse wheel up scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelDownScrollAmount">
            <summary>
            Gets mouse wheel down scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelLeftScrollAmount">
            <summary>
            Gets mouse wheel left scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetMouseWheelRightScrollAmount">
            <summary>
            Gets mouse wheel right scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageUpScrollAmount">
            <summary>
            Gets page up scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageDownScrollAmount">
            <summary>
            Gets page down scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageLeftScrollAmount">
            <summary>
            Gets page left scroll amount.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingPanelBase.GetPageRightScrollAmount">
            <summary>
            Gets page right scroll amount.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingUniformGrid">
            <summary>
            <para><c>Work in progress.</c></para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Controls.VirtualizingWrapPanel">
            <summary>
            Extended base class for <see cref="T:System.Windows.Controls.VirtualizingPanel"/>.
            <para>Based on <see href="https://github.com/sbaeumlisberger/VirtualizingWrapPanel"/>.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.ChildSize">
            <summary>
            Size of the single child element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.RowCount">
            <summary>
            Amount of the displayed rows.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemsPerRowCount">
            <summary>
            Amount of displayed items per row.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.SpacingModeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.SpacingMode"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.OrientationProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.Orientation"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSizeProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSize"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Controls.VirtualizingWrapPanel.StretchItemsProperty">
            <summary>
            Property for <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.StretchItems"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.SpacingMode">
            <summary>
            Gets or sets the spacing mode used when arranging the items. The default value is <see cref="F:Wpf.Ui.Common.SpacingMode.Uniform"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.Orientation">
            <summary>
            Gets or sets a value that specifies the orientation in which items are arranged. The default value is <see cref="F:System.Windows.Controls.Orientation.Vertical"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSize">
            <summary>
            Gets or sets a value that specifies the size of the items. The default value is <see cref="P:System.Windows.Size.Empty"/>. 
            If the value is <see cref="P:System.Windows.Size.Empty"/> the size of the items gots measured by the first realized item.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Controls.VirtualizingWrapPanel.StretchItems">
            <summary>
            Gets or sets a value that specifies if the items get stretched to fill up remaining space. The default value is false.
            </summary>
            <remarks>
            The MaxWidth and MaxHeight properties of the ItemContainerStyle can be used to limit the stretching. 
            In this case the use of the remaining space will be determined by the SpacingMode property. 
            </remarks>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.OnOrientationChanged">
            <summary>
            This virtual method is called when <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.Orientation"/> is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.OnOrientationChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Private callback for <see cref="F:Wpf.Ui.Controls.VirtualizingWrapPanel.OrientationProperty"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.MeasureOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.UpdateChildSize(System.Windows.Size)">
            <summary>
            Updates child size of <see cref="P:Wpf.Ui.Controls.VirtualizingWrapPanel.ItemSize"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateChildSize(System.Windows.Size)">
            <summary>
            Calculates child size.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateExtent(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateSpacing(System.Windows.Size,System.Double@,System.Double@)">
            <summary>
            Calculates desired spacing between items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.ArrangeOverride(System.Windows.Size)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CalculateChildArrangeSize(System.Windows.Size)">
            <summary>
            Calculates desired child arrange size.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.ReadItemContainerStyle``1(System.Windows.DependencyProperty,``0)">
            <summary>
            Gets container style of the <see cref="T:System.Windows.Controls.ItemsControl"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="property"></param>
            <param name="fallbackValue"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.UpdateItemRange">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetRowIndex(System.Double)">
            <summary>
            Gets item row index.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.BringIndexIntoView(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineUpScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineDownScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineLeftScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetLineRightScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelUpScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelDownScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelLeftScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetMouseWheelRightScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageUpScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageDownScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageLeftScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetPageRightScrollAmount">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetX(System.Windows.Point)">
            <summary>
            Gets X panel orientation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetY(System.Windows.Point)">
            <summary>
            Gets Y panel orientation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetWidth(System.Windows.Size)">
            <summary>
            Gets panel width.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.GetHeight(System.Windows.Size)">
            <summary>
            Gets panel height.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CreateSize(System.Double,System.Double)">
            <summary>
            Defines panel size.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Controls.VirtualizingWrapPanel.CreateRect(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Defines panel coordinates and size.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Converters.BrushToColorConverter">
            <summary>
            Converts <see cref="T:System.Windows.Media.SolidColorBrush"/>  to <see langword="Color"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.BrushToColorConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see cref="T:System.Windows.Media.SolidColorBrush"/>  to <see langword="Color"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.BrushToColorConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Wpf.Ui.Converters.FallbackBrushConverter">
            <summary>
            Converts <see cref="T:System.Object"/> to <see cref="T:System.Windows.Media.SolidColorBrush"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.FallbackBrushConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see cref="T:System.Windows.Media.SolidColorBrush"/>  to <see langword="Color"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.FallbackBrushConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Wpf.Ui.Converters.IconNotEmptyConverter">
            <summary>
            Checks if the <see cref="T:Wpf.Ui.Common.SymbolRegular"/> is valid and not empty.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.IconNotEmptyConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Checks if the <see cref="T:Wpf.Ui.Common.SymbolRegular"/> is valid and not empty.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.IconNotEmptyConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Wpf.Ui.Converters.IconToStringConverter">
            <summary>
            Converts using <see cref="M:Wpf.Ui.Converters.IconToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)"/> <see cref="T:Wpf.Ui.Common.SymbolRegular"/> or <see cref="T:Wpf.Ui.Common.SymbolFilled"/> to <see langword="string"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.IconToStringConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolRegular"/> or <see cref="T:Wpf.Ui.Common.SymbolFilled"/> to <see langword="string"/>.
            <para>If the given value is <see langword="char"/> or <see langword="string"/> it will simply be returned as a <see langword="string"/>.</para>
            </summary>
            <returns><see langword="string"/> representing <see cref="T:Wpf.Ui.Common.SymbolRegular"/> or <see cref="T:Wpf.Ui.Common.SymbolFilled"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Converters.IconToStringConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Wpf.Ui.Converters.ObjectToSymbolConverter">
            <summary>
            Tries to convert <see langword="object"/>  to <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.ObjectToSymbolConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see langword="object"/> to <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            <para>If the given value is <see cref="T:Wpf.Ui.Common.SymbolRegular"/> or <see cref="T:Wpf.Ui.Common.SymbolFilled"/> it will simply be returned as a <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.</para>
            </summary>
            <returns>Valid <see cref="T:Wpf.Ui.Common.SymbolRegular"/> or <see cref="F:Wpf.Ui.Common.SymbolRegular.Empty"/> if failed.</returns>
        </member>
        <member name="M:Wpf.Ui.Converters.ObjectToSymbolConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Wpf.Ui.Converters.ProgressThicknessConverter">
            <summary>
            Converts Height to Thickness.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.ProgressThicknessConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Checks if the <see cref="T:Wpf.Ui.Common.SymbolRegular"/> is valid and not empty.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.ProgressThicknessConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:Wpf.Ui.Converters.TextToAsteriskConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Converts <see langword="string"/> to <see langword="*"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Converters.TextToAsteriskConverter.ConvertBack(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)">
            <summary>
            Not Implemented.
            </summary>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:Wpf.Ui.Dpi.Dpi">
            <summary>
            Stores DPI information from which a System.Windows.Media.Visual or System.Windows.UIElement
            is rendered.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Dpi.Dpi.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the System.Windows.DpiScale structure.
            </summary>
            <param name="dpiScaleX">The DPI scale on the X axis.</param>
            <param name="dpiScaleY">The DPI scale on the Y axis.</param>
        </member>
        <member name="M:Wpf.Ui.Dpi.Dpi.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the System.Windows.DpiScale structure.
            </summary>
            <param name="dpiX">The DPI on the X axis.</param>
            <param name="dpiY">The DPI on the Y axis.</param>
        </member>
        <member name="P:Wpf.Ui.Dpi.Dpi.DpiX">
            <summary>
            Gets the DPI on the X axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Dpi.Dpi.DpiY">
            <summary>
            Gets the DPI on the Y axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Dpi.Dpi.DpiScaleX">
            <summary>
            Gets the DPI scale on the X axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Dpi.Dpi.DpiScaleY">
            <summary>
            Gets the DPI scale on the Y axis.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Dpi.DpiChangedEventArgs.NewDpi">
            <summary>
            Gets the scale information after a DPI change.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Dpi.DpiChangedEventArgs.OldDpi">
            <summary>
            Gets the DPI scale information before a DPI change.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Dpi.DpiHelper">
            <summary>
            Provides access to various DPI-related methods.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Dpi.DpiHelper.DefaultDpi">
            <summary>
            Default DPI value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Dpi.DpiHelper.GetWindowDpi(System.Windows.Window)">
            <summary>
            Gets DPI of the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window that you want to get information about.</param>
        </member>
        <member name="M:Wpf.Ui.Dpi.DpiHelper.GetWindowDpi(System.IntPtr)">
            <summary>
            Gets DPI of the selected <see cref="T:System.Windows.Window"/> based on it's handle.
            </summary>
            <param name="windowHandle">Handle of the window that you want to get information about.</param>
        </member>
        <member name="M:Wpf.Ui.Dpi.DpiHelper.GetSystemDpi">
            <summary>
            Gets the DPI values from <see cref="T:System.Windows.SystemParameters"/>.
            </summary>
            <returns>The DPI values from <see cref="T:System.Windows.SystemParameters"/>. If the property cannot be accessed, the default value <see langword="96"/> is returned.</returns>
        </member>
        <member name="M:Wpf.Ui.Dpi.DpiHelper.LogicalPixelsToDevice(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Convert a point in device independent pixels (1/96") to a point in the system coordinates.
            </summary>
            <param name="logicalPoint">A point in the logical coordinate system.</param>
            <param name="dpiScaleX">Horizontal DPI scale.</param>
            <param name="dpiScaleY">Vertical DPI scale.</param>
            <returns>Returns the parameter converted to the system's coordinates.</returns>
        </member>
        <member name="M:Wpf.Ui.Dpi.DpiHelper.DevicePixelsToLogical(System.Windows.Point,System.Double,System.Double)">
            <summary>
            Convert a point in system coordinates to a point in device independent pixels (1/96").
            </summary>
            <returns>Returns the parameter converted to the device independent coordinate system.</returns>
        </member>
        <member name="T:Wpf.Ui.Extensions.ColorExtensions">
            <summary>
            Adds an extension for <see cref="T:System.Windows.Media.Color"/> that allows manipulation with HSL and HSV color spaces.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Extensions.ColorExtensions.ByteMax">
            <summary>
            Maximum <see cref="T:System.Byte"/> size with the current <see cref="T:System.Single"/> precision.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToBrush(System.Windows.Media.Color)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.SolidColorBrush"/> from a <see cref="T:System.Windows.Media.Color"/>.
            </summary>
            <param name="color">Input color.</param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToBrush(System.Windows.Media.Color,System.Double)">
            <summary>
            Creates a <see cref="T:System.Windows.Media.SolidColorBrush"/> from a <see cref="T:System.Windows.Media.Color"/> with defined brush opacity.
            </summary>
            <param name="color">Input color.</param>
            <param name="opacity">Degree of opacity.</param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetLuminance(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> luminance based on HSL space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetBrightness(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> brightness based on HSV space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetHue(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> hue based on HSV space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.GetSaturation(System.Windows.Media.Color)">
            <summary>
            Gets <see cref="T:System.Windows.Media.Color"/> saturation based on HSV space.
            </summary>
            <param name="color">Input color.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.UpdateLuminance(System.Windows.Media.Color,System.Single)">
            <summary>
            Allows to change the luminance by a factor based on the HSL color space.
            </summary>
            <param name="color">Input color.</param>
            <param name="factor">The value of the luminance change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.UpdateSaturation(System.Windows.Media.Color,System.Single)">
            <summary>
            Allows to change the saturation by a factor based on the HSL color space.
            </summary>
            <param name="color">Input color.</param>
            <param name="factor">The value of the saturation change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.UpdateBrightness(System.Windows.Media.Color,System.Single)">
            <summary>
            Allows to change the brightness by a factor based on the HSV color space.
            </summary>
            <param name="color">Input color.</param>
            <param name="factor">The value of the brightness change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.Update(System.Windows.Media.Color,System.Single,System.Single,System.Single)">
            <summary>
            Allows to change the brightness, saturation and luminance by a factors based on the HSL and HSV color space.
            </summary>
            <param name="color"></param>
            <param name="brightnessFactor">The value of the brightness change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <param name="saturationFactor">The value of the saturation change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <param name="luminanceFactor">The value of the luminance change factor from <see langword="100"/> to <see langword="-100"/>.</param>
            <returns>Updated <see cref="T:System.Windows.Media.Color"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToHsl(System.Windows.Media.Color)">
            <summary>
            HSL representation models the way different paints mix together to create colour in the real world,
            with the lightness dimension resembling the varying amounts of black or white paint in the mixture.
            </summary>
            <returns><see langword="float"/> hue, <see langword="float"/> saturation, <see langword="float"/> lightness</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToHsv(System.Windows.Media.Color)">
            <summary>
            HSV representation models how colors appear under light.
            </summary>
            <returns><see langword="float"/> hue, <see langword="float"/> saturation, <see langword="float"/> brightness</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.FromHslToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Converts the color values stored as HSL to RGB.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.FromHsvToRgb(System.Single,System.Single,System.Single)">
            <summary>
            Converts the color values stored as HSV (HSB) to RGB.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.CalcHslChannel(System.Single,System.Single,System.Single)">
            <summary>
            Calculates the color component for HSL.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.AlmostEquals(System.Single,System.Single,System.Single)">
            <summary>
            Whether the floating point number is about the same.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToPercentage(System.Single)">
            <summary>
            Absolute percentage.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ColorExtensions.ToColorByte(System.Int32)">
            <summary>
            Absolute byte.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.ContextMenuExtensions">
            <summary>
            Extensions for the <see cref="T:System.Windows.Controls.ContextMenu"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.ContextMenuExtensions.ApplyMica(System.Windows.Controls.ContextMenu)">
            <summary>
            Tries to apply Mica effect to the <see cref="T:System.Windows.Controls.ContextMenu"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.DateTimeExtensions">
            <summary>
            A collection of several extensions to the <see cref="T:System.DateTime"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.DateTimeExtensions.GetTimestamp(System.DateTime)">
            <summary>
            Gets the number of seconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.DateTimeExtensions.GetMillisTimestamp(System.DateTime)">
            <summary>
            Gets the number of milliseconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.DateTimeExtensions.GetMicroTimestamp(System.DateTime)">
            <summary>
            Gets the number of microseconds that have elapsed since the Unix epoch, excluding leap seconds. The Unix epoch is 00:00:00 UTC on 1 January 1970.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.FrameExtensions">
            <summary>
            Set of extensions for <see cref="T:System.Windows.Controls.Frame"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.FrameExtensions.GetDataContext(System.Windows.Controls.Frame)">
            <summary>
            Gets <see cref="P:System.Windows.FrameworkElement.DataContext"/> from <see cref="T:System.Windows.Controls.Frame"/>.
            </summary>
            <param name="frame">Selected frame.</param>
            <returns>DataContext of currently active element, otherwise <see langword="null"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.FrameExtensions.CleanNavigation(System.Windows.Controls.Frame)">
            <summary>
            Cleans <see cref="T:System.Windows.Controls.Frame"/> journal.
            </summary>
            <param name="frame">Selected frame.</param>
        </member>
        <member name="T:Wpf.Ui.Extensions.SymbolExtensions">
            <summary>
            Set of extensions for the enumeration of icons to facilitate their management and replacement.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.Swap(Wpf.Ui.Common.SymbolRegular)">
            <summary>
            Replaces <see cref="T:Wpf.Ui.Common.SymbolRegular"/> with <see cref="T:Wpf.Ui.Common.SymbolFilled"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.Swap(Wpf.Ui.Common.SymbolFilled)">
            <summary>
            Replaces <see cref="T:Wpf.Ui.Common.SymbolFilled"/> with <see cref="T:Wpf.Ui.Common.SymbolRegular"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.GetGlyph(Wpf.Ui.Common.SymbolRegular)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolRegular"/> to <see langword="char"/> based on the ID.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.GetGlyph(Wpf.Ui.Common.SymbolFilled)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolFilled"/> to <see langword="char"/> based on the ID.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.GetString(Wpf.Ui.Common.SymbolRegular)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolRegular"/> to <see langword="string"/> based on the ID.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.GetString(Wpf.Ui.Common.SymbolFilled)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolFilled"/> to <see langword="string"/> based on the ID.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.ToChar(Wpf.Ui.Common.SymbolRegular)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolRegular"/> to <see langword="char"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.SymbolExtensions.ToChar(Wpf.Ui.Common.SymbolFilled)">
            <summary>
            Converts <see cref="T:Wpf.Ui.Common.SymbolFilled"/> to <see langword="char"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.UriExtensions">
            <summary>
            Extensions for <see cref="T:System.Uri"/> class.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.TrimLastSegment(System.Uri)">
            <summary>
            Removes last segment of the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.EndsWith(System.Uri,System.String)">
            <summary>
            Determines whether the end of <see cref="T:System.Uri"/> is equal to provided value.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.Append(System.Uri,System.String[])">
            <summary>
            Append provided segments to the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.UriExtensions.Append(System.Uri,System.Uri)">
            <summary>
            Append new <see cref="T:System.Uri"/> to the <see cref="T:System.Uri"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Extensions.WindowExtensions">
            <summary>
            Set of extensions for <see cref="T:System.Windows.Window"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Extensions.WindowExtensions.ApplyBackdrop(System.Windows.Window,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Tries to aplly backdrop effect to selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window"></param>
            <param name="backgroundType"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Extensions.WindowExtensions.RemoveTitlebar(System.Windows.Window)">
            <summary>
            Tries to remove the default titlebar.
            </summary>
            <param name="window">Selected window.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.WindowExtensions.ApplyDefaultBackground(System.Windows.Window)">
            <summary>
            Tries to set the default window background color for the selected theme.
            </summary>
            <param name="window">Selected window.</param>
        </member>
        <member name="M:Wpf.Ui.Extensions.WindowExtensions.ApplyCorners(System.Windows.Window,Wpf.Ui.Appearance.WindowCornerPreference)">
            <summary>
            Tries to round the <see cref="T:System.Windows.Window"/> corners.
            </summary>
            <param name="window">Selected window.</param>
            <param name="cornerPreference">Window corner preference.</param>
        </member>
        <member name="T:Wpf.Ui.Hardware.HardwareAcceleration">
            <summary>
            Set of tools for hardware acceleration.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Hardware.HardwareAcceleration.IsSupported(Wpf.Ui.Hardware.RenderingTier)">
            <summary>
            Determines whether the provided rendering tier is supported.
            </summary>
            <param name="tier">Hardware acceleration rendering tier to check.</param>
            <returns><see langword="true"/> if tier is supported.</returns>
        </member>
        <member name="T:Wpf.Ui.Hardware.RenderingTier">
            <summary>
            An <see cref="T:System.Int32"/> value whose high-order word corresponds to the rendering tier for the current thread.
            <para>Starting in the .NET Framework 4, rendering tier 1 has been redefined to only include graphics hardware that supports DirectX 9.0 or greater. Graphics hardware that supports DirectX 7 or 8 is now defined as rendering tier 0.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.RenderingTier.NoAcceleration">
            <summary>
            No graphics hardware acceleration is available for the application on the device.
            All graphics features use software acceleration. The DirectX version level is less than version 9.0.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.RenderingTier.PartialAcceleration">
            <summary>
            Most of the graphics features of WPF will use hardware acceleration
            if the necessary system resources are available and have not been exhausted.
            This corresponds to a DirectX version that is greater than or equal to 9.0.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Hardware.RenderingTier.FullAcceleration">
            <summary>
            Most of the graphics features of WPF will use hardware acceleration provided the
            necessary system resources have not been exhausted.
            This corresponds to a DirectX version that is greater than or equal to 9.0.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi">
            <summary>
            Desktop Window Manager (DWM).
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_CLOAKED">
            <summary>
            Cloaked flags describing why a window is cloaked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.GESTURE_TYPE">
            <summary>
            GT_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS">
            <summary>
            DWMTWR_* Tab window requirements.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_NONE">
            <summary>
            This result means the window meets all requirements requested.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_IMPLEMENTED_BY_SYSTEM">
            <summary>
            In some configurations, admin/user setting or mode of the system means that windows won't be tabbed
            This requirement says that the system/mode must implement tabbing and if it does not
            nothing can be done to change this.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_RELATIONSHIP">
            <summary>
            The window has an owner or parent so is ineligible for tabbing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_STYLES">
            <summary>
            The window has styles that make it ineligible for tabbing.
            <para>To be eligible windows must:</para>
            <para>Have the WS_OVERLAPPEDWINDOW (WS_CAPTION, WS_THICKFRAME, etc.) styles set.</para>
            <para>Not have WS_POPUP, WS_CHILD or WS_DLGFRAME set.</para>
            <para>Not have WS_EX_TOPMOST or WS_EX_TOOLWINDOW set.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_DWM_ATTRIBUTES">
            <summary>
            The window is ineligible due to its Dwm configuration.
            It must not extended its client area into the title bar using DwmExtendFrameIntoClientArea
            It must not have DWMWA_NCRENDERING_POLICY set to DWMNCRP_ENABLED
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_WINDOW_MARGINS">
            <summary>
            The window is ineligible due to it's margins, most likely due to custom handling in WM_NCCALCSIZE.
            The window must use the default window margins for the non-client area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_TABBING_ENABLED">
            <summary>
            The window has been explicitly opted out by setting DWMWA_TABBING_ENABLED to FALSE.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_USER_POLICY">
            <summary>
            The user has configured this application to not participate in tabbing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_GROUP_POLICY">
            <summary>
            The group policy has configured this application to not participate in tabbing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_TAB_WINDOW_REQUIREMENTS.DWMTWR_APP_COMPAT">
            <summary>
            This is set if app compat has blocked tabs for this window. Can be overridden per window by setting
            DWMWA_TABBING_ENABLED to TRUE. That does not override any other tabbing requirements.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_WINDOW_CORNER_PREFERENCE">
            <summary>
            Flags used by the DwmSetWindowAttribute function to specify the rounded corner preference for a window.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMSBT">
            <summary>
            Backdrop types.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_AUTO">
            <summary>
            Automatically selects backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_DISABLE">
            <summary>
            Turns off the backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_MAINWINDOW">
            <summary>
            Sets Mica effect with generated wallpaper tint.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_TRANSIENTWINDOW">
            <summary>
            Sets acrlic effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMSBT.DWMSBT_TABBEDWINDOW">
            <summary>
            Sets blurred wallpaper effect, like Mica without tint.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY">
            <summary>
            Non-client rendering policy attribute values
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_USEWINDOWSTYLE">
            <summary>
            Enable/disable non-client rendering based on window style
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_DISABLED">
            <summary>
            Disabled non-client rendering; window style is ignored
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_ENABLED">
            <summary>
            Enabled non-client rendering; window style is ignored
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMNCRENDERINGPOLICY.DWMNCRP_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY">
            <summary>
            Values designating how Flip3D treats a given window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_DEFAULT">
            <summary>
            Hide or include the window in Flip3D based on window style and visibility.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_EXCLUDEBELOW">
            <summary>
            Display the window under Flip3D and disabled.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_EXCLUDEABOVE">
            <summary>
            Display the window above Flip3D and enabled.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMFLIP3DWINDOWPOLICY.DWMFLIP3D_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE">
            <summary>
            Options used by the DwmGetWindowAttribute and DwmSetWindowAttribute functions.
            <para><see href="https://github.com/electron/electron/issues/29937"/></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_ENABLED">
            <summary>
            Is non-client rendering enabled/disabled
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_NCRENDERING_POLICY">
            <summary>
            DWMNCRENDERINGPOLICY - Non-client rendering policy
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_TRANSITIONS_FORCEDISABLED">
            <summary>
            Potentially enable/forcibly disable transitions
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_ALLOW_NCPAINT">
            <summary>
            Enables content rendered in the non-client area to be visible on the frame drawn by DWM.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CAPTION_BUTTON_BOUNDS">
            <summary>
            Retrieves the bounds of the caption button area in the window-relative space.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_NONCLIENT_RTL_LAYOUT">
            <summary>
            Is non-client content RTL mirrored
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_FORCE_ICONIC_REPRESENTATION">
            <summary>
            Forces the window to display an iconic thumbnail or peek representation (a static bitmap), even if a live or snapshot representation of the window is available.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_FLIP3D_POLICY">
            <summary>
            Designates how Flip3D will treat the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_EXTENDED_FRAME_BOUNDS">
            <summary>
            Gets the extended frame bounds rectangle in screen space
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_HAS_ICONIC_BITMAP">
            <summary>
            Indicates an available bitmap when there is no better thumbnail representation.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_DISALLOW_PEEK">
            <summary>
            Don't invoke Peek on the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_EXCLUDED_FROM_PEEK">
            <summary>
            LivePreview exclusion information
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CLOAK">
            <summary>
            Cloaks the window such that it is not visible to the user.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CLOAKED">
            <summary>
            If the window is cloaked, provides one of the following values explaining why.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_FREEZE_REPRESENTATION">
            <summary>
            Freeze the window's thumbnail image with its current visuals. Do no further live updates on the thumbnail image to match the window's contents.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_PASSIVE_UPDATE_MODE">
            <summary>
            BOOL, Updates the window only when desktop composition runs for other reasons
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_USE_HOSTBACKDROPBRUSH">
            <summary>
            BOOL, Allows the use of host backdrop brushes for the window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DMWA_USE_IMMERSIVE_DARK_MODE_OLD">
            <summary>
            Allows a window to either use the accent color, or dark, according to the user Color Mode preferences.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_USE_IMMERSIVE_DARK_MODE">
            <summary>
            Allows a window to either use the accent color, or dark, according to the user Color Mode preferences.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_WINDOW_CORNER_PREFERENCE">
            <summary>
            Controls the policy that rounds top-level window corners.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_BORDER_COLOR">
            <summary>
            The color of the thin border around a top-level window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_CAPTION_COLOR">
            <summary>
            The color of the caption.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_TEXT_COLOR">
            <summary>
            The color of the caption text.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_VISIBLE_FRAME_BORDER_THICKNESS">
            <summary>
            Width of the visible border around a thick frame window.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_SYSTEMBACKDROP_TYPE">
            <summary>
            Allows to enter a value from 0 to 4 deciding on the imposed backdrop effect.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE.DWMWA_MICA_EFFECT">
            <summary>
            Indicates whether the window should use the Mica effect.
            <para>Windows 11 and above.</para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS">
            <summary>
            Represents the current DWM color accent settings.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrColor">
            <summary>
            ColorizationColor
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrAfterGlow">
            <summary>
            ColorizationAfterglow.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.nIntensity">
            <summary>
            ColorizationColorBalance.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrAfterGlowBalance">
            <summary>
            ColorizationAfterglowBalance.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrBlurBalance">
            <summary>
            ColorizationBlurBalance.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.clrGlassReflectionIntensity">
            <summary>
            ColorizationGlassReflectionIntensity.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS.fOpaque">
            <summary>
            ColorizationOpaqueBlend.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.UNSIGNED_RATIO">
            <summary>
            Defines a data type used by the Desktop Window Manager (DWM) APIs. It represents a generic ratio and is used for different purposes and units even within a single API.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.UNSIGNED_RATIO.uiNumerator">
            <summary>
            The ratio numerator.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.UNSIGNED_RATIO.uiDenominator">
            <summary>
            The ratio denominator.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_SHOWCONTACT">
            <summary>
            Specifies the input operations for which visual feedback should be provided. This enumeration is used by the DwmShowContact function.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING">
            <summary>
            Flags used by the DwmSetPresentParameters function to specify the frame sampling type.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING.DWM_SOURCE_FRAME_SAMPLING_POINT">
            <summary>
            Use the first source frame that includes the first refresh of the output frame
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING.DWM_SOURCE_FRAME_SAMPLING_COVERAGE">
            <summary>
            Use the source frame that includes the most refreshes of out the output frame
            in case of multiple source frames with the same coverage the last will be used
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SOURCE_FRAME_SAMPLING.DWM_SOURCE_FRAME_SAMPLING_LAST">
            <summary>
            Sentinel value.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO">
            <summary>
            Specifies Desktop Window Manager (DWM) composition timing information. Used by the <see cref="M:Wpf.Ui.Interop.Dwmapi.DwmGetCompositionTimingInfo(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO@)"/> function.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Dwmapi.DWM_SIT">
            <summary>
            SIT flags.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SIT.NONE">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Dwmapi.DWM_SIT.DISPLAYFRAME">
            <summary>
            Displays a frame around the provided bitmap.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmIsCompositionEnabled(System.Int32@)">
            <summary>
            Obtains a value that indicates whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
            <param name="pfEnabled">A pointer to a value that, when this function returns successfully, receives TRUE if DWM composition is enabled; otherwise, FALSE.</param>
            <returns>If this function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmExtendFrameIntoClientArea(System.IntPtr,Wpf.Ui.Interop.UxTheme.MARGINS@)">
            <summary>
            Extends the window frame into the client area.
            </summary>
            <param name="hWnd">The handle to the window in which the frame will be extended into the client area.</param>
            <param name="pMarInset">A pointer to a MARGINS structure that describes the margins to use when extending the frame into the client area.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetCompositionTimingInfo(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO@)">
            <summary>
            Retrieves the current composition timing information for a specified window.
            </summary>
            <param name="hWnd">The handle to the window for which the composition timing information should be retrieved.</param>
            <param name="pTimingInfo">A pointer to a <see cref="T:Wpf.Ui.Interop.Dwmapi.DWM_TIMING_INFO"/> structure that, when this function returns successfully, receives the current composition timing information for the window.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmInvalidateIconicBitmaps(System.IntPtr)">
            <summary>
            Called by an application to indicate that all previously provided iconic bitmaps from a window, both thumbnails and peek representations, should be refreshed.
            </summary>
            <param name="hWnd">A handle to the window or tab whose bitmaps are being invalidated through this call. This window must belong to the calling process.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetIconicThumbnail(System.IntPtr,System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWM_SIT)">
            <summary>
            Sets a static, iconic bitmap on a window or tab to use as a thumbnail representation. The taskbar can use this bitmap as a thumbnail switch target for the window or tab.
            </summary>
            <param name="hWnd">A handle to the window or tab. This window must belong to the calling process.</param>
            <param name="hbmp">A handle to the bitmap to represent the window that hwnd specifies.</param>
            <param name="dwSITFlags">The display options for the thumbnail.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetIconicLivePreviewBitmap(System.IntPtr,System.IntPtr,Wpf.Ui.Interop.WinDef.POINT,Wpf.Ui.Interop.Dwmapi.DWM_SIT)">
            <summary>
            Sets a static, iconic bitmap to display a live preview (also known as a Peek preview) of a window or tab. The taskbar can use this bitmap to show a full-sized preview of a window or tab.
            </summary>
            <param name="hWnd">A handle to the window. This window must belong to the calling process.</param>
            <param name="hbmp">A handle to the bitmap to represent the window that hwnd specifies.</param>
            <param name="pptClient">The offset of a tab window's client region (the content area inside the client window frame) from the host window's frame. This offset enables the tab window's contents to be drawn correctly in a live preview when it is drawn without its frame.</param>
            <param name="dwSITFlags">The display options for the live preview.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute value is to be set.</param>
            <param name="dwAttribute">A flag describing which value to set, specified as a value of the DWMWINDOWATTRIBUTE enumeration.</param>
            <param name="pvAttribute">A pointer to an object containing the attribute value to set.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <c>pvAttribute</c> parameter.</param>
            <returns>If the function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmSetWindowAttribute(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE,System.Int32@,System.Int32)">
            <summary>
            Sets the value of Desktop Window Manager (DWM) non-client rendering attributes for a window.
            </summary>
            <param name="hWnd">The handle to the window for which the attribute value is to be set.</param>
            <param name="dwAttribute">A flag describing which value to set, specified as a value of the DWMWINDOWATTRIBUTE enumeration.</param>
            <param name="pvAttribute">A pointer to an object containing the attribute value to set.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being set via the <c>pvAttribute</c> parameter.</param>
            <returns>If the function succeeds, it returns <c>S_OK</c>. Otherwise, it returns an <c>HRESULT</c> error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetWindowAttribute(System.IntPtr,Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE,System.Int32@,System.Int32)">
            <summary>
            Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window. For programming guidance, and code examples, see Controlling non-client region rendering.
            </summary>
            <param name="hWnd">The handle to the window from which the attribute value is to be retrieved.</param>
            <param name="dwAttributeToGet">A flag describing which value to retrieve, specified as a value of the <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE"/> enumeration.</param>
            <param name="pvAttributeValue">A pointer to a value which, when this function returns successfully, receives the current value of the attribute. The type of the retrieved value depends on the value of the dwAttribute parameter.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being received via the pvAttribute parameter.</param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetWindowAttribute(System.IntPtr,System.Int32,System.Int32@,System.Int32)">
            <summary>
            Retrieves the current value of a specified Desktop Window Manager (DWM) attribute applied to a window. For programming guidance, and code examples, see Controlling non-client region rendering.
            </summary>
            <param name="hWnd">The handle to the window from which the attribute value is to be retrieved.</param>
            <param name="dwAttributeToGet">A flag describing which value to retrieve, specified as a value of the <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMWINDOWATTRIBUTE"/> enumeration.</param>
            <param name="pvAttributeValue">A pointer to a value which, when this function returns successfully, receives the current value of the attribute. The type of the retrieved value depends on the value of the dwAttribute parameter.</param>
            <param name="cbAttribute">The size, in bytes, of the attribute value being received via the pvAttribute parameter.</param>
            <returns>If the function succeeds, it returns S_OK. Otherwise, it returns an HRESULT error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Dwmapi.DwmGetColorizationParameters(Wpf.Ui.Interop.Dwmapi.DWMCOLORIZATIONPARAMS@)">
            <summary>
            The feature is not included in the Microsoft documentation. Reads Desktop Window Manager (DWM) color information.
            </summary>
            <param name="dwParameters">A pointer to a reference value that will hold the color information.</param>
        </member>
        <member name="T:Wpf.Ui.Interop.Kernel32">
            <summary>
            Used by multiple technologies.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.Kernel32.GetLastError">
            <summary>
            Retrieves the calling thread's last-error code value. The last-error code is maintained on a per-thread basis. Multiple threads do not overwrite each other's last-error code.
            </summary>
            <returns>The return value is the calling thread's last-error code.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.Kernel32.SetLastError(System.Int32)">
            <summary>
            Sets the last-error code for the calling thread.
            </summary>
            <param name="dwErrorCode">The last-error code for the thread.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.Kernel32.IsDebuggerPresent">
            <summary>
            Determines whether the calling process is being debugged by a user-mode debugger.
            </summary>
            <returns>If the current process is running in the context of a debugger, the return value is nonzero.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.Libraries">
            <summary>
            Windows kernel module.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32">
            <summary>
            The Windows UI provides users with access to a wide variety of objects necessary to run applications and manage the operating system.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32.DOGIF">
            <summary>
            DATAOBJ_GET_ITEM_FLAGS.  DOGIF_*.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32.NIM">
            <summary>
            Shell_NotifyIcon messages.  NIM_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.Shell32.NIF">
            <summary>
            Shell_NotifyIcon flags.  NIF_*
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NIF.REALTIME">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NIF.SHOWTIP">
            <summary>
            Vista only.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.cbSize">
            <summary>
            The size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.hWnd">
            <summary>
            A handle to the window that receives notifications associated with an icon in the notification area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uID">
            <summary>
            The application-defined identifier of the taskbar icon. The Shell uses either (hWnd plus uID) or guidItem to identify which icon to operate on when Shell_NotifyIcon is invoked.
            You can have multiple icons associated with a single hWnd by assigning each a different uID. If guidItem is specified, uID is ignored.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uFlags">
            <summary>
            Flags that either indicate which of the other members of the structure contain valid data or provide additional information to the tooltip as to how it should display.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uCallbackMessage">
            <summary>
            0x00000001. The uCallbackMessage member is valid.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.hIcon">
            <summary>
            0x00000002. The hIcon member is valid.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.szTip">
            <summary>
            0x00000004. The szTip member is valid.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.dwState">
            <summary>
            The state of the icon.  There are two flags that can be set independently.
            NIS_HIDDEN = 1.  The icon is hidden.
            NIS_SHAREDICON = 2.  The icon is shared.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.Shell32.NOTIFYICONDATA.uVersion">
            <summary>
            Prior to Vista this was a union of uTimeout and uVersion.  As of Vista, uTimeout has been deprecated.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.Shell32.SetCurrentProcessExplicitAppUserModelID(System.String)">
            <summary>
            Sets the User Model AppID for the current process, enabling Windows to retrieve this ID
            </summary>
            <param name="AppID"></param>
        </member>
        <member name="M:Wpf.Ui.Interop.Shell32.GetCurrentProcessExplicitAppUserModelID(System.String@)">
            <summary>
            Retrieves the User Model AppID that has been explicitly set for the current process via SetCurrentProcessExplicitAppUserModelID
            </summary>
            <param name="AppID"></param>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl">
            <summary>
            Exposes methods that enumerate the contents of a view and receive notification from callback upon enumeration completion.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTONFLAGS">
            <summary>
            THUMBBUTTON flags.  THBF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTONMASK">
            <summary>
            THUMBBUTTON mask.  THB_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.TBPFLAG">
            <summary>
            TBPF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.STPFLAG">
            <summary>
            STPF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.EXPLORER_BROWSER_OPTIONS">
            <summary>
            EBO_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.EXPLORER_BROWSER_FILL_FLAGS">
            <summary>
            EBF_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON">
            <summary>
            THUMBBUTTON
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON.THBN_CLICKED">
            <summary>
            WPARAM value for a THUMBBUTTON being clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.CTaskbarList">
            <summary>
            Class DECLSPEC_UUID("56FDF344-FD6D-11d0-958A-006097C9A090")
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.ShellItem">
            <summary>
            Class DECLSPEC_UUID("9ac9fbe1-e0a2-4ad6-b4ee-e212013ea917")
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.ShObjIdl.ITaskbarList4">
            <summary>
            MIDL_INTERFACE("c43dc798-95d1-4bea-9030-bb99e2983a1a")
            ITaskbarList4 : public ITaskbarList3
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.ShObjIdl.ITaskbarList4.ThumbBarAddButtons(System.IntPtr,System.UInt32,Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON[])">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="cButtons"></param>
            <param name="pButtons"></param>
            <returns>HRESULT</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.ShObjIdl.ITaskbarList4.ThumbBarUpdateButtons(System.IntPtr,System.UInt32,Wpf.Ui.Interop.ShObjIdl.THUMBBUTTON[])">
            <summary>
            
            </summary>
            <param name="hwnd"></param>
            <param name="cButtons"></param>
            <param name="pButtons"></param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.UnsafeNativeMethods">
            <summary>
            A set of dangerous methods to modify the appearance.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.Windows.Window,Wpf.Ui.Appearance.WindowCornerPreference)">
            <summary>
            Tries to set the <see cref="T:System.Windows.Window"/> corner preference.
            </summary>
            <param name="window">Selected window.</param>
            <param name="cornerPreference">Window corner preference.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowCornerPreference(System.IntPtr,Wpf.Ui.Appearance.WindowCornerPreference)">
            <summary>
            Tries to set the corner preference of the selected window.
            </summary>
            <param name="handle">Selected window handle.</param>
            <param name="cornerPreference">Window corner preference.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.Windows.Window)">
            <summary>
            Tries to remove ImmersiveDarkMode effect from the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowDarkMode(System.IntPtr)">
            <summary>
            Tries to remove ImmersiveDarkMode effect from the window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.Windows.Window)">
            <summary>
            Tries to apply ImmersiveDarkMode effect for the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowDarkMode(System.IntPtr)">
            <summary>
            Tries to apply ImmersiveDarkMode effect for the window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowTitlebar(System.Windows.Window)">
            <summary>
            Tries to remove titlebar from selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowTitlebar(System.IntPtr)">
            <summary>
            Tries to remove titlebar from selected window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.Windows.Window,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Tries to apply selected backdrop type for <see cref="T:System.Windows.Window"/>
            </summary>
            <param name="window">Selected window.</param>
            <param name="backgroundType">Backdrop type.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowBackdrop(System.IntPtr,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Tries to apply selected backdrop type for window handle.
            </summary>
            <param name="handle">Selected window handle.</param>
            <param name="backgroundType">Backdrop type.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowBackdrop(System.Windows.Window)">
            <summary>
            Tries to remove backdrop effect from the <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">Selected Window.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.RemoveWindowBackdrop(System.IntPtr)">
            <summary>
            Tries to remove backdrop effect from the window handle.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.Windows.Window,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Tries to determine whether the provided <see cref="T:System.Windows.Window"/> has applied legacy backdrop effect.
            </summary>
            <param name="window">Window to check.</param>
            <param name="backdropType">Background backdrop type.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasBackdrop(System.IntPtr,Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Tries to determine whether the provided <see cref="T:System.Windows.Window"/> has applied legacy backdrop effect.
            </summary>
            <param name="handle">Window handle.</param>
            <param name="backdropType">Background backdrop type.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.Windows.Window)">
            <summary>
            Tries to determine whether the provided <see cref="T:System.Windows.Window"/> has applied legacy Mica effect.
            </summary>
            <param name="window">Window to check.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsWindowHasLegacyMica(System.IntPtr)">
            <summary>
            Tries to determine whether the provided handle has applied legacy Mica effect.
            </summary>
            <param name="handle">Window handle.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.Windows.Window)">
            <summary>
            Tries to apply legacy Mica effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyMicaEffect(System.IntPtr)">
            <summary>
            Tries to apply legacy Mica effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="handle">Window handle.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.Windows.Window)">
            <summary>
            Tries to apply legacy Acrylic effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="window">The window to which the effect is to be applied.</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.ApplyWindowLegacyAcrylicEffect(System.IntPtr)">
            <summary>
            Tries to apply legacy Acrylic effect for the selected <see cref="T:System.Windows.Window"/>.
            </summary>
            <param name="handle">Window handle</param>
            <returns><see langword="true"/> if invocation of native Windows function succeeds.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.GetDwmColor">
            <summary>
            Tries to get currently selected Window accent color.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.SetTaskbarState(System.IntPtr,Wpf.Ui.Interop.ShObjIdl.TBPFLAG)">
            <summary>
            Tries to set taskbar state for the selected window handle.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskbarFlag">Taskbar flag.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.SetTaskbarValue(System.IntPtr,Wpf.Ui.Interop.ShObjIdl.TBPFLAG,System.Int32,System.Int32)">
            <summary>
            Tries to set taskbar value for the selected window handle.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="current">Current value.</param>
            <param name="total">Total value to divide.</param>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsCompositionEnabled">
            <summary>
            Checks whether the DWM composition is enabled.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.IsValidWindow(System.IntPtr)">
            <summary>
            Checks if provided pointer represents existing window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeNativeMethods.GetHandle(System.Windows.Window,System.IntPtr@)">
            <summary>
            Tries to get the pointer to the window handle.
            </summary>
            <param name="window"></param>
            <param name="windowHandle"></param>
            <returns><see langword="true"/> if the handle is not <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.UnsafeReflection">
            <summary>
            A set of dangerous methods to modify the appearance.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Appearance.BackgroundType)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Appearance.BackgroundType"/> to <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMSBT"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Interop.Dwmapi.DWMSBT)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Interop.Dwmapi.DWMSBT"/> to <see cref="T:Wpf.Ui.Appearance.BackgroundType"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Appearance.WindowCornerPreference)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Appearance.WindowCornerPreference"/> to <see cref="T:Wpf.Ui.Interop.Dwmapi.DWM_WINDOW_CORNER_PREFERENCE"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Interop.Dwmapi.DWM_WINDOW_CORNER_PREFERENCE)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Interop.Dwmapi.DWM_WINDOW_CORNER_PREFERENCE"/> to <see cref="T:Wpf.Ui.Appearance.WindowCornerPreference"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Casts <see cref="T:Wpf.Ui.TaskBar.TaskBarProgressState"/> to <see cref="T:Wpf.Ui.Interop.ShObjIdl.TBPFLAG"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UnsafeReflection.Cast(Wpf.Ui.Interop.ShObjIdl.TBPFLAG)">
            <summary>
            Casts <see cref="T:Wpf.Ui.Interop.ShObjIdl.TBPFLAG"/> to <see cref="T:Wpf.Ui.TaskBar.TaskBarProgressState"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32">
            <summary>
            USER procedure declarations, constant definitions and macros.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SWP">
            <summary>
            SetWindowPos options
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MF">
            <summary>
            EnableMenuItem uEnable values, MF_*
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MF.DOES_NOT_EXIST">
            <summary>
            Possible return value for EnableMenuItem
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SC">
            <summary>
            Menu item element.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.SC.F_ISSECURE">
            <summary>
            SCF_ISSECURE
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WM_NCHITTEST">
            <summary>
            WM_NCHITTEST and MOUSEHOOKSTRUCT Mouse Position Codes
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTERROR">
            <summary>
            Hit test returned error.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTTRANSPARENT">
            <summary>
            Hit test returned transparent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTNOWHERE">
            <summary>
            On the screen background or on a dividing line between windows.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTCLIENT">
            <summary>
            In a client area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTCAPTION">
            <summary>
            In a title bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTSYSMENU">
            <summary>
            In a window menu or in a Close button in a child window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTGROWBOX">
            <summary>
            In a size box (same as HTSIZE).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTMENU">
            <summary>
            In a menu.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTHSCROLL">
            <summary>
            In a horizontal scroll bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTVSCROLL">
            <summary>
            In the vertical scroll bar.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTMINBUTTON">
            <summary>
            In a Minimize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTMAXBUTTON">
            <summary>
            In a Maximize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTLEFT">
            <summary>
            In the left border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTRIGHT">
            <summary>
            In the right border of a resizable window (the user can click the mouse to resize the window horizontally).
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM_NCHITTEST.HTTOP">
            <summary>
            In the upper-horizontal border of a window.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.GWL">
            <summary>
            Window long flags.
            <para><see href="https://docs.microsoft.com/en-us/windows/win32/api/winuser/nf-winuser-setwindowlonga"/></para>
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_EXSTYLE">
            <summary>
            Sets a new extended window style.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWLP_HINSTANCE">
            <summary>
            Sets a new application instance handle.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWLP_HWNDPARENT">
            <summary>
            Sets a new hWnd parent.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_ID">
            <summary>
            Sets a new identifier of the child window. The window cannot be a top-level window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_STYLE">
            <summary>
            Sets a new window style.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_USERDATA">
            <summary>
            Sets the user data associated with the window.
            This data is intended for use by the application that created the window. Its value is initially zero.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.GWL_WNDPROC">
            <summary>
            Sets a new address for the window procedure.
            You cannot change this attribute if the window does not belong to the same process as the calling thread.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.DWLP_USER">
            <summary>
            Sets new extra information that is private to the application, such as handles or pointers.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.DWLP_MSGRESULT">
            <summary>
            Sets the return value of a message processed in the dialog box procedure.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.GWL.DWLP_DLGPROC">
            <summary>
            Sets the new address of the dialog box procedure.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WCA">
            <summary>
            Window composition attributes.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.ACCENT_STATE">
            <summary>
            DWM window accent state.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.ACCENT_POLICY">
            <summary>
            WCA window accent policy.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.CS">
            <summary>
            CS_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MSGFLT">
            <summary>
            MSGFLT_*. New in Vista. Realiased in Windows 7.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MSGFLT.RESET">
            <summary>
            Resets the window message filter for hWnd to the default. Any message allowed globally or process-wide will get through, but any message not included in those two categories, and which comes from a lower privileged process, will be blocked.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MSGFLT.ALLOW">
            <summary>
            Allows the message through the filter. This enables the message to be received by hWnd, regardless of the source of the message, even it comes from a lower privileged process.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.MSGFLT.DISALLOW">
            <summary>
            Blocks the message to be delivered to hWnd if it comes from a lower privileged process, unless the message is allowed process-wide by using the ChangeWindowMessageFilter function or globally.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MSGFLTINFO">
            <summary>
            MSGFLTINFO.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.CHANGEFILTERSTRUCT">
            <summary>
            Win7 only.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WM">
            <summary>
            Window message values, WM_*
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WM.TRAYMOUSEMESSAGE">
            <summary>
            This is the hard-coded message value used by WinForms for Shell_NotifyIcon.
            It's relatively safe to reuse.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WS">
            <summary>
            WindowStyle values, WS_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WS_EX">
            <summary>
            Window style extended values, WS_EX_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SM">
            <summary>
            SystemMetrics.  SM_*
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.SW">
            <summary>
            ShowWindow options
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WNDCLASSEX">
            <summary>
            Contains window class information. It is used with the <see cref="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)"/> and GetClassInfoEx functions.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.cbSize">
            <summary>
            The size, in bytes, of this structure. Set this member to sizeof(WNDCLASSEX). Be sure to set this member before calling the GetClassInfoEx function.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.style">
            <summary>
            The class style(s). This member can be any combination of the Class Styles.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.lpfnWndProc">
            <summary>
            A pointer to the window procedure. You must use the CallWindowProc function to call the window procedure. For more information, see WindowProc.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.cbClsExtra">
            <summary>
            The number of extra bytes to allocate following the window-class structure. The system initializes the bytes to zero.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.cbWndExtra">
            <summary>
            The number of extra bytes to allocate following the window instance. The system initializes the bytes to zero. If an application uses WNDCLASSEX to register a dialog box created by using the CLASS directive in the resource file, it must set this member to DLGWINDOWEXTRA.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hInstance">
            <summary>
            A handle to the instance that contains the window procedure for the class.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hIcon">
            <summary>
            A handle to the class icon. This member must be a handle to an icon resource. If this member is NULL, the system provides a default icon.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hCursor">
            <summary>
            A handle to the class cursor. This member must be a handle to a cursor resource. If this member is NULL, an application must explicitly set the cursor shape whenever the mouse moves into the application's window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hbrBackground">
            <summary>
            A handle to the class background brush. This member can be a handle to the brush to be used for painting the background, or it can be a color value.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.lpszMenuName">
            <summary>
            Pointer to a null-terminated character string that specifies the resource name of the class menu, as the name appears in the resource file. If you use an integer to identify the menu, use the MAKEINTRESOURCE macro. If this member is NULL, windows belonging to this class have no default menu.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.lpszClassName">
            <summary>
            A pointer to a null-terminated string or is an atom. If this parameter is an atom, it must be a class atom created by a previous call to the RegisterClass or RegisterClassEx function. The atom must be in the low-order word of lpszClassName; the high-order word must be zero.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.User32.WNDCLASSEX.hIconSm">
            <summary>
            A handle to a small icon that is associated with the window class. If this member is NULL, the system searches the icon resource specified by the hIcon member for an icon of the appropriate size to use as the small icon.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WndProc">
            <summary>
            Delegate declaration that matches native WndProc signatures.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.WndProcHook">
            <summary>
            Delegate declaration that matches native WndProc signatures.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.User32.MessageHandler">
            <summary>
            Delegate declaration that matches managed WndProc signatures.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.ReleaseDC(System.IntPtr,System.IntPtr)">
            <summary>
            The ReleaseDC function releases a device context (DC), freeing it for use by other applications.
            The effect of the ReleaseDC function depends on the type of DC. It frees only common and window DCs. It has no effect on class or private DCs.
            </summary>
            <param name="hWnd">A handle to the window whose DC is to be released.</param>
            <param name="hDC">A handle to the DC to be released.</param>
            <returns>The return value indicates whether the DC was released. If the DC was released, the return value is 1. If the DC was not released, the return value is zero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.AdjustWindowRectEx(System.Windows.Rect@,Wpf.Ui.Interop.User32.WS,System.Boolean,Wpf.Ui.Interop.User32.WS_EX)">
            <summary>
            Calculates the required size of the window rectangle, based on the desired size of the client rectangle.
            The window rectangle can then be passed to the CreateWindowEx function to create a window whose client area is the desired size.
            </summary>
            <param name="lpRect">A pointer to a RECT structure that contains the coordinates of the top-left and bottom-right corners of the desired client area.</param>
            <param name="dwStyle">The window style of the window whose required size is to be calculated. Note that you cannot specify the WS_OVERLAPPED style.</param>
            <param name="bMenu">Indicates whether the window has a menu.</param>
            <param name="dwExStyle">The extended window style of the window whose required size is to be calculated.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.ChangeWindowMessageFilter(Wpf.Ui.Interop.User32.WM,Wpf.Ui.Interop.User32.MSGFLT)">
            <summary>
            [Using the ChangeWindowMessageFilter function is not recommended, as it has process-wide scope. Instead, use the ChangeWindowMessageFilterEx function to control access to specific windows as needed. ChangeWindowMessageFilter may not be supported in future versions of Windows.
            <para>Adds or removes a message from the User Interface Privilege Isolation(UIPI) message filter.</para>
            </summary>
            <param name="message">The message to add to or remove from the filter.</param>
            <param name="dwFlag">The action to be performed. One of the following values.</param>
            <returns><see langword="true"/> if successful; otherwise, <see langword="false"/>. To get extended error information, call <see cref="M:Wpf.Ui.Interop.Kernel32.GetLastError"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.ChangeWindowMessageFilterEx(System.IntPtr,Wpf.Ui.Interop.User32.WM,Wpf.Ui.Interop.User32.MSGFLT,Wpf.Ui.Interop.User32.CHANGEFILTERSTRUCT@)">
            <summary>
            Modifies the User Interface Privilege Isolation (UIPI) message filter for a specified window.
            </summary>
            <param name="hWnd">A handle to the window whose UIPI message filter is to be modified.</param>
            <param name="message">The message that the message filter allows through or blocks.</param>
            <param name="action">The action to be performed.</param>
            <param name="pChangeFilterStruct">Optional pointer to a <see cref="T:Wpf.Ui.Interop.User32.CHANGEFILTERSTRUCT"/> structure.</param>
            <returns>If the function succeeds, it returns <see langword="true"/>; otherwise, it returns <see langword="false"/>. To get extended error information, call <see cref="M:Wpf.Ui.Interop.Kernel32.GetLastError"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.PostMessageW(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.PostMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="Msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.PostMessageA(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.PostMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="Msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.PostMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Places (posts) a message in the message queue associated with the thread that created the specified window and returns without waiting for the thread to process the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure is to receive the message.</param>
            <param name="Msg">The message to be posted.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SendMessage(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Sends the specified message to a window or windows. The SendMessage function calls the window procedure for the specified window and does not return until the window procedure has processed the message.
            </summary>
            <param name="hWnd">A handle to the window whose window procedure will receive the message.</param>
            <param name="wMsg">The message to be sent.</param>
            <param name="wParam">Additional message-specific information.</param>
            <param name="lParam">Additional message-specific information.</param>
            <returns>The return value specifies the result of the message processing; it depends on the message sent.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.CreateWindowExW(Wpf.Ui.Interop.User32.WS_EX,System.String,System.String,Wpf.Ui.Interop.User32.WS,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates an overlapped, pop-up, or child window with an extended window style; otherwise,
            this function is identical to the CreateWindow function. For more information about
            creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.
            </summary>
            <param name="dwExStyle">The extended window style of the window being created.</param>
            <param name="lpClassName">A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function.</param>
            <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar.</param>
            <param name="dwStyle">The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.</param>
            <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="y">The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="nWidth">The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT.</param>
            <param name="nHeight">The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.</param>
            <param name="hWndParent">A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</param>
            <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used.</param>
            <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
            <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message. This message is sent to the created window by this function before it returns.</param>
            <returns>If the function succeeds, the return value is a handle to the new window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.CreateWindowEx(Wpf.Ui.Interop.User32.WS_EX,System.String,System.String,Wpf.Ui.Interop.User32.WS,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates an overlapped, pop-up, or child window with an extended window style; otherwise,
            this function is identical to the CreateWindow function. For more information about
            creating a window and for full descriptions of the other parameters of CreateWindowEx, see CreateWindow.
            </summary>
            <param name="dwExStyle">The extended window style of the window being created.</param>
            <param name="lpClassName">A null-terminated string or a class atom created by a previous call to the RegisterClass or RegisterClassEx function.</param>
            <param name="lpWindowName">The window name. If the window style specifies a title bar, the window title pointed to by lpWindowName is displayed in the title bar.</param>
            <param name="dwStyle">The style of the window being created. This parameter can be a combination of the window style values, plus the control styles indicated in the Remarks section.</param>
            <param name="x">The initial horizontal position of the window. For an overlapped or pop-up window, the x parameter is the initial x-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="y">The initial vertical position of the window. For an overlapped or pop-up window, the y parameter is the initial y-coordinate of the window's upper-left corner, in screen coordinates.</param>
            <param name="nWidth">The width, in device units, of the window. For overlapped windows, nWidth is the window's width, in screen coordinates, or CW_USEDEFAULT.</param>
            <param name="nHeight">The height, in device units, of the window. For overlapped windows, nHeight is the window's height, in screen coordinates. If the nWidth parameter is set to CW_USEDEFAULT, the system ignores nHeight.</param>
            <param name="hWndParent">A handle to the parent or owner window of the window being created. To create a child window or an owned window, supply a valid window handle. This parameter is optional for pop-up windows.</param>
            <param name="hMenu">A handle to a menu, or specifies a child-window identifier, depending on the window style. For an overlapped or pop-up window, hMenu identifies the menu to be used with the window; it can be NULL if the class menu is to be used.</param>
            <param name="hInstance">A handle to the instance of the module to be associated with the window.</param>
            <param name="lpParam">Pointer to a value to be passed to the window through the CREATESTRUCT structure (lpCreateParams member) pointed to by the lParam param of the WM_CREATE message. This message is sent to the created window by this function before it returns.</param>
            <returns>If the function succeeds, the return value is a handle to the new window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterClassExW(Wpf.Ui.Interop.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)"/></para>
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Wpf.Ui.Interop.User32.WNDCLASSEX"/> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterClassExA(Wpf.Ui.Interop.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)"/></para>
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Wpf.Ui.Interop.User32.WNDCLASSEX"/> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterClassEx(Wpf.Ui.Interop.User32.WNDCLASSEX@)">
            <summary>
            Registers a window class for subsequent use in calls to the CreateWindow or CreateWindowEx function.
            </summary>
            <param name="lpwcx">A pointer to a <see cref="T:Wpf.Ui.Interop.User32.WNDCLASSEX"/> structure. You must fill the structure with the appropriate class attributes before passing it to the function.</param>
            <returns>If the function succeeds, the return value is a class atom that uniquely identifies the class being registered.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DefWindowProcW(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.DefWindowProc(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="Msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DefWindowProcA(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.DefWindowProc(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="Msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DefWindowProc(System.IntPtr,Wpf.Ui.Interop.User32.WM,System.IntPtr,System.IntPtr)">
            <summary>
            Calls the default window procedure to provide default processing for any window messages that an application does not process.
            This function ensures that every message is processed. DefWindowProc is called with the same parameters received by the window procedure.
            </summary>
            <param name="hWnd">A handle to the window procedure that received the message.</param>
            <param name="Msg">The message.</param>
            <param name="wParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <param name="lParam">Additional message information. The content of this parameter depends on the value of the Msg parameter.</param>
            <returns>The return value is the result of the message processing and depends on the message.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongW(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongA(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLong(System.IntPtr,Wpf.Ui.Interop.User32.GWL)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the 32-bit (DWORD) value at the specified offset into the extra window memory.
            <para>If you are retrieving a pointer or a handle, this function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/> function.</para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongPtrW(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongPtrA(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)">
            <summary>
            Retrieves information about the specified window. The function also retrieves the value at a specified offset into the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be retrieved.</param>
            <returns>If the function succeeds, the return value is the requested value.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongW(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongA(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,System.Int32,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,Wpf.Ui.Interop.User32.GWL,System.Int64)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLong(System.IntPtr,Wpf.Ui.Interop.User32.GWL,Wpf.Ui.Interop.User32.WS)">
            <summary>
            Changes an attribute of the specified window. The function also sets the 32-bit (long) value at the specified offset into the extra window memory.
            <para>Note: This function has been superseded by the <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/> function. To write code that is compatible with both 32-bit and 64-bit versions of Windows, use the SetWindowLongPtr function.</para>
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.GetWindowLongPtr(System.IntPtr,System.Int32)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set. Valid values are in the range zero through the number of bytes of extra window memory, minus the size of an integer.</param>
            <param name="dwNewLong">New window style.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified 32-bit integer.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongPtrW(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongPtrA(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)"/></para>
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowLongPtr(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Changes an attribute of the specified window. The function also sets a value at the specified offset in the extra window memory.
            </summary>
            <param name="hWnd">A handle to the window and, indirectly, the class to which the window belongs.</param>
            <param name="nIndex">The zero-based offset to the value to be set.</param>
            <param name="dwNewLong">The replacement value.</param>
            <returns>If the function succeeds, the return value is the previous value of the specified offset.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DestroyIcon(System.IntPtr)">
            <summary>
            Destroys an icon and frees any memory the icon occupied.
            </summary>
            <param name="handle">A handle to the icon to be destroyed. The icon must not be in use.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IsWindow(System.IntPtr)">
            <summary>
            Determines whether the specified window handle identifies an existing window.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>If the window handle identifies an existing window, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.DestroyWindow(System.IntPtr)">
            <summary>
            Destroys the specified window. The function sends WM_DESTROY and WM_NCDESTROY messages to the window to deactivate it and remove the keyboard focus from it.
            </summary>
            <param name="hWnd">A handle to the window to be destroyed.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowPlacement(System.IntPtr,Wpf.Ui.Interop.User32.WINDOWPLACEMENT)">
            <summary>
            Retrieves the show state and the restored, minimized, and maximized positions of the specified window.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpwndpl">A pointer to the <see cref="T:Wpf.Ui.Interop.User32.WINDOWPLACEMENT"/> structure that receives the show state and position information. Before calling GetWindowPlacement, set the length member to sizeof(WINDOWPLACEMENT). GetWindowPlacement fails if lpwndpl-> length is not set correctly.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowRect(System.IntPtr,System.Windows.Rect@)">
            <summary>
            Retrieves the dimensions of the bounding rectangle of the specified window. The dimensions are given in screen coordinates that are relative to the upper-left corner of the screen.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="lpRect">A pointer to a RECT structure that receives the screen coordinates of the upper-left and lower-right corners of the window.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IsWindowVisible(System.IntPtr)">
            <summary>
            Determines the visibility state of the specified window.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>If the specified window, its parent window, its parent's parent window, and so forth, have the WS_VISIBLE style, the return value is nonzero. Otherwise, the return value is zero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IsWindowEnabled(System.IntPtr)">
            <summary>
            Determines whether the specified window is enabled for mouse and keyboard input.
            </summary>
            <param name="hWnd">A handle to the window to be tested.</param>
            <returns>If the window is enabled, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.MonitorFromWindow(System.IntPtr,System.UInt32)">
            <summary>
            The MonitorFromWindow function retrieves a handle to the display monitor that has the largest area of intersection with the bounding rectangle of a specified window.
            </summary>
            <param name="hWnd">A handle to the window of interest.</param>
            <param name="dwFlags">Determines the function's return value if the window does not intersect any display monitor.</param>
            <returns>If the window intersects one or more display monitor rectangles, the return value is an HMONITOR handle to the display monitor that has the largest area of intersection with the window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetSystemMetrics(Wpf.Ui.Interop.User32.SM)">
            <summary>
            Retrieves the specified system metric or system configuration setting.
            Note that all dimensions retrieved by GetSystemMetrics are in pixels.
            </summary>
            <param name="nIndex">The system metric or configuration setting to be retrieved. This parameter can be one of the <see cref="T:Wpf.Ui.Interop.User32.SM"/> values.
            Note that all SM_CX* values are widths and all SM_CY* values are heights. Also note that all settings designed to return Boolean data represent <see langword="true"/> as any nonzero value, and <see langword="false"/> as a zero value.</param>
            <returns>If the function succeeds, the return value is the requested system metric or configuration setting.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterWindowMessageW(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            <para>Unicode declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterWindowMessage(System.String)"/></para>
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterWindowMessageA(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            <para>ANSI declaration for <see cref="M:Wpf.Ui.Interop.User32.RegisterWindowMessage(System.String)"/></para>
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.RegisterWindowMessage(System.String)">
            <summary>
            Defines a new window message that is guaranteed to be unique throughout the system. The message value can be used when sending or posting messages.
            </summary>
            <param name="lpString">The message to be registered.</param>
            <returns>If the message is successfully registered, the return value is a message identifier in the range 0xC000 through 0xFFFF.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetActiveWindow(System.IntPtr)">
            <summary>
            Activates a window. The window must be attached to the calling thread's message queue.
            </summary>
            <param name="hWnd">A handle to the top-level window to be activated.</param>
            <returns>If the function succeeds, the return value is the handle to the window that was previously active.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetForegroundWindow(System.IntPtr)">
            <summary>
            Brings the thread that created the specified window into the foreground and activates the window.
            Keyboard input is directed to the window, and various visual cues are changed for the user.
            The system assigns a slightly higher priority to the thread that created the foreground window than it does to other threads.
            </summary>
            <param name="hWnd">A handle to the window that should be activated and brought to the foreground.</param>
            <returns>If the window was brought to the foreground, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetCursorPos(Wpf.Ui.Interop.WinDef.POINT@)">
            <summary>
            Retrieves the position of the mouse cursor, in screen coordinates.
            </summary>
            <param name="lpPoint">A pointer to a <see cref="T:Wpf.Ui.Interop.WinDef.POINT"/> structure that receives the screen coordinates of the cursor.</param>
            <returns>Returns nonzero if successful or zero otherwise. To get extended error information, call <see cref="M:Wpf.Ui.Interop.Kernel32.GetLastError"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.UnionRect(Wpf.Ui.Interop.WinDef.RECT@,Wpf.Ui.Interop.WinDef.RECT@,Wpf.Ui.Interop.WinDef.RECT@)">
            <summary>
            
            </summary>
            <param name="rcDst"></param>
            <param name="rc1"></param>
            <param name="rc2"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.IntersectRect(Wpf.Ui.Interop.WinDef.RECT@,Wpf.Ui.Interop.WinDef.RECT@,Wpf.Ui.Interop.WinDef.RECT@)">
            <summary>
            
            </summary>
            <param name="rcDest"></param>
            <param name="rc1"></param>
            <param name="rc2"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetShellWindow">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.MapVirtualKey(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="nVirtKey"></param>
            <param name="nMapType"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetSysColor(System.Int32)">
            <summary>
            
            </summary>
            <param name="nIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetSystemMenu(System.IntPtr,System.Boolean)">
            <summary>
            
            </summary>
            <param name="hWnd"></param>
            <param name="bRevert"></param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.EnableMenuItem(System.IntPtr,Wpf.Ui.Interop.User32.SC,Wpf.Ui.Interop.User32.MF)">
            <summary>
            Enables, disables, or grays the specified menu item.
            </summary>
            <param name="hMenu">A handle to the menu.</param>
            <param name="uIDEnableItem">The menu item to be enabled, disabled, or grayed, as determined by the uEnable parameter.</param>
            <param name="uEnable">Controls the interpretation of the uIDEnableItem parameter and indicate whether the menu item is enabled, disabled, or grayed.</param>
            <returns>The return value specifies the previous state of the menu item (it is either MF_DISABLED, MF_ENABLED, or MF_GRAYED). If the menu item does not exist, the return value is -1 (<see cref="F:Wpf.Ui.Interop.User32.MF.DOES_NOT_EXIST"/>).</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowRgn(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>
            The SetWindowRgn function sets the window region of a window. The window region determines the area within the window where the system permits drawing. The system does not display any portion of a window that lies outside of the window region.
            </summary>
            <param name="hWnd">A handle to the window whose window region is to be set.</param>
            <param name="hRgn">A handle to a region. The function sets the window region of the window to this region.</param>
            <param name="bRedraw">Specifies whether the system redraws the window after setting the window region. If bRedraw is <see langword="true"/>, the system does so; otherwise, it does not.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Native method returned HRESULT.</exception>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowPos(System.IntPtr,System.IntPtr,System.Int32,System.Int32,System.Int32,System.Int32,Wpf.Ui.Interop.User32.SWP)">
            <summary>
            Changes the size, position, and Z order of a child, pop-up, or top-level window. These windows are ordered according to their appearance on the screen. The topmost window receives the highest rank and is the first window in the Z order.
            </summary>
            <param name="hWnd">A handle to the window.</param>
            <param name="hWndInsertAfter">A handle to the window to precede the positioned window in the Z order.</param>
            <param name="x">The new position of the left side of the window, in client coordinates.</param>
            <param name="y">The new position of the top of the window, in client coordinates.</param>
            <param name="cx">The new width of the window, in pixels.</param>
            <param name="cy">The new height of the window, in pixels.</param>
            <param name="uFlags">The window sizing and positioning flags.</param>
            <returns>If the function succeeds, the return value is nonzero.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetProcessDPIAware">
            <summary>
            Sets the process-default DPI awareness to system-DPI awareness. This is equivalent to calling SetProcessDpiAwarenessContext with a DPI_AWARENESS_CONTEXT value of DPI_AWARENESS_CONTEXT_SYSTEM_AWARE.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.SetWindowCompositionAttribute(System.IntPtr,Wpf.Ui.Interop.User32.WINCOMPATTRDATA@)">
            <summary>
            Sets various information regarding DWM window attributes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetWindowCompositionAttribute(System.IntPtr,Wpf.Ui.Interop.User32.WINCOMPATTRDATA@)">
            <summary>
            Sets various information regarding DWM window attributes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetDpiForWindow(System.IntPtr)">
            <summary>
            Returns the dots per inch (dpi) value for the specified window.
            </summary>
            <param name="hWnd">The window that you want to get information about.</param>
            <returns>The DPI for the window, which depends on the DPI_AWARENESS of the window.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.User32.GetDpiForWindow(System.Runtime.InteropServices.HandleRef)">
            <summary>
            Returns the dots per inch (dpi) value for the specified window.
            </summary>
            <param name="hwnd">The window that you want to get information about.</param>
            <returns>The DPI for the window, which depends on the DPI_AWARENESS of the window.</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.MARGINS">
            <summary>
            Returned by the GetThemeMargins function to define the margins of windows that have visual styles applied.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cxLeftWidth">
            <summary>
            Width of left border that retains its size.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cxRightWidth">
            <summary>
             Width of right border that retains its size.
             </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cyTopHeight">
            <summary>
            Height of top border that retains its size.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.MARGINS.cyBottomHeight">
            <summary>
            Height of bottom border that retains its size.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.WINDOWTHEMEATTRIBUTETYPE">
            <summary>
            Specifies the type of visual style attribute to set on a window.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WINDOWTHEMEATTRIBUTETYPE.WTA_NONCLIENT">
            <summary>
            Non-client area window attributes will be set.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.WTNCA">
            <summary>
            WindowThemeNonClientAttributes
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NODRAWCAPTION">
            <summary>
            Prevents the window caption from being drawn.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NODRAWICON">
            <summary>
            Prevents the system icon from being drawn.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NOSYSMENU">
            <summary>
            Prevents the system icon menu from appearing.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.NOMIRRORHELP">
            <summary>
            Prevents mirroring of the question mark, even in right-to-left (RTL) layout.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTNCA.VALIDBITS">
            <summary>
            A mask that contains all the valid bits.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.UxTheme.WTA_OPTIONS">
            <summary>
            Defines options that are used to set window visual style attributes.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTA_OPTIONS.dwFlags">
            <summary>
            A combination of flags that modify window visual style attributes.
            Can be a combination of the WTNCA constants.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.UxTheme.WTA_OPTIONS.dwMask">
            <summary>
            A bitmask that describes how the values specified in dwFlags should be applied.
            If the bit corresponding to a value in dwFlags is 0, that flag will be removed.
            If the bit is 1, the flag will be added.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.UxTheme.SetWindowThemeAttribute(System.IntPtr,Wpf.Ui.Interop.UxTheme.WINDOWTHEMEATTRIBUTETYPE,Wpf.Ui.Interop.UxTheme.WTA_OPTIONS@,System.UInt32)">
            <summary>
            Sets attributes to control how visual styles are applied to a specified window.
            </summary>
            <param name="hWnd">
            Handle to a window to apply changes to.
            </param>
            <param name="eAttribute">
            Value of type WINDOWTHEMEATTRIBUTETYPE that specifies the type of attribute to set.
            The value of this parameter determines the type of data that should be passed in the pvAttribute parameter.
            Can be the following value:
            <list>WTA_NONCLIENT (Specifies non-client related attributes).</list>
            pvAttribute must be a pointer of type WTA_OPTIONS.
            </param>
            <param name="pvAttribute">
            A pointer that specifies attributes to set. Type is determined by the value of the eAttribute value.
            </param>
            <param name="cbAttribute">
            Specifies the size, in bytes, of the data pointed to by pvAttribute.
            </param>
        </member>
        <member name="M:Wpf.Ui.Interop.UxTheme.IsThemeActive">
            <summary>
            Tests if a visual style for the current application is active.
            </summary>
            <returns><see langword="true"/> if a visual style is enabled, and windows with visual styles applied should call OpenThemeData to start using theme drawing services.</returns>
        </member>
        <member name="M:Wpf.Ui.Interop.UxTheme.GetCurrentThemeName(System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32,System.Text.StringBuilder,System.Int32)">
            <summary>
            Retrieves the name of the current visual style, and optionally retrieves the color scheme name and size name.
            </summary>
            <param name="pszThemeFileName">Pointer to a string that receives the theme path and file name.</param>
            <param name="dwMaxNameChars">Value of type int that contains the maximum number of characters allowed in the theme file name.</param>
            <param name="pszColorBuff">Pointer to a string that receives the color scheme name. This parameter may be set to NULL.</param>
            <param name="cchMaxColorChars">Value of type int that contains the maximum number of characters allowed in the color scheme name.</param>
            <param name="pszSizeBuff">Pointer to a string that receives the size name. This parameter may be set to NULL.</param>
            <param name="cchMaxSizeChars">Value of type int that contains the maximum number of characters allowed in the size name.</param>
            <returns>HRESULT</returns>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.POINT">
            <summary>
            The POINT structure defines the x- and y-coordinates of a point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINT.x">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINT.y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.POINTL">
            <summary>
            The <see cref="T:Wpf.Ui.Interop.WinDef.POINTL"/> structure defines the x- and y-coordinates of a point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINTL.x">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINTL.y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.POINTS">
            <summary>
            The POINTL structure defines the x- and y-coordinates of a point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINTS.x">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.POINTS.y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.RECT">
            <summary>
            The RECT structure defines a rectangle by the coordinates of its upper-left and lower-right corners.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Width">
            <summary>
            Specifies the width of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Height">
            <summary>
            Specifies the height of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Position">
            <summary>
            Specifies the position of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECT.Size">
            <summary>
            Specifies the size of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.Offset(System.Int32,System.Int32)">
            <summary>
            Sets offset of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.Union(Wpf.Ui.Interop.WinDef.RECT,Wpf.Ui.Interop.WinDef.RECT)">
            <summary>
            Combines two RECTs.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECT.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.RECTL">
            <summary>
            The RECTL structure defines a rectangle by the coordinates of its upper-left and lower-right corners.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Left">
            <summary>
            Specifies the x-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Right">
            <summary>
            Specifies the x-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Top">
            <summary>
            Specifies the y-coordinate of the upper-left corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Bottom">
            <summary>
            Specifies the y-coordinate of the lower-right corner of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Width">
            <summary>
            Specifies the width of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Height">
            <summary>
            Specifies the height of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Position">
            <summary>
            Specifies the position of the rectangle.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Interop.WinDef.RECTL.Size">
            <summary>
            Specifies the size of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.Offset(System.Int32,System.Int32)">
            <summary>
            Sets offset of the rectangle.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.Union(Wpf.Ui.Interop.WinDef.RECTL,Wpf.Ui.Interop.WinDef.RECTL)">
            <summary>
            Combines two RECTLs
            </summary>
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Interop.WinDef.RECTL.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.RefPOINT">
            <summary>
            <see cref="T:Wpf.Ui.Interop.WinDef.POINT"/> structure by reference.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.RefPOINT.x">
            <summary>
            Specifies the x-coordinate of the point.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.RefPOINT.y">
            <summary>
            Specifies the y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Interop.WinDef.SIZE">
            <summary>
            The SIZE structure defines the width and height of a rectangle.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.SIZE.cx">
            <summary>
            Specifies the rectangle's width. The units depend on which function uses this structure.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Interop.WinDef.SIZE.cy">
            <summary>
            Specifies the rectangle's height. The units depend on which function uses this structure.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Markup.ThemeResource">
            <summary>
            Collection of theme resources.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Markup.ThemeResource.Unknown">
            <summary>
            Unspecified theme resource.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Markup.ThemeResourceExtension">
            <summary>
            Class for Xaml markup extension for static theme resource references.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Markup.ThemeResourceExtension.ResourceKey">
            <summary>
             The key in a Resource Dictionary used to find the object referred to by this
             Markup Extension.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Markup.ThemeResourceExtension.#ctor">
            <summary>
             Constructor that takes no parameters
            </summary>
        </member>
        <member name="M:Wpf.Ui.Markup.ThemeResourceExtension.#ctor(Wpf.Ui.Markup.ThemeResource)">
            <summary>
             Constructor that takes the resource key that this is a static reference to.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Markup.ThemeResourceExtension.ProvideValue(System.IServiceProvider)">
            <summary>
             Return an object that should be set on the targetObject's targetProperty
             for this markup extension.  For DynamicResourceExtension, this is the object found in
             a resource dictionary in the current parent chain that is keyed by ResourceKey
            </summary>
            <returns>
             The object to set on this property.
            </returns>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.INavigationService">
            <summary>
            Represents a contract with a <see cref="T:System.Windows.FrameworkElement"/> that contains <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            Through defined <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/> service allows you to use the MVVM model in <c>WPF UI</c> navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.GetFrame">
            <summary>
            Provides direct access to the <see cref="T:System.Windows.Controls.Frame"/> used in navigation.
            </summary>
            <returns>Instance of the <see cref="T:System.Windows.Controls.Frame"/> control.</returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.SetFrame(System.Windows.Controls.Frame)">
            <summary>
            Sets the <see cref="T:System.Windows.Controls.Frame"/> used by <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
            <param name="frame">Frame to set.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.GetNavigation">
            <summary>
            Provides direct access to the control responsible for navigation.
            </summary>
            <returns>Instance of the <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> control.</returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.SetNavigation(Wpf.Ui.Controls.Interfaces.INavigation)">
            <summary>
            Lets you attach the control that represents the <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
            <param name="navigation">Instance of the <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.SetPageService(Wpf.Ui.Mvvm.Contracts.IPageService)">
            <summary>
            Lets you attach the service that delivers page instances to <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
            <param name="pageService">Instance of the <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/> with attached service provider.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.Navigate(System.Type)">
            <summary>
            Lets you navigate to the selected page based on it's type. Should be used with <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageType"><see langword="Type"/> of the page.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.Navigate(System.Int32)">
            <summary>
            Lets you navigate to the selected page based on it's id. Should be used with <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageId">Id of the page.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationService.Navigate(System.String)">
            <summary>
            Lets you navigate to the selected page based on it's tag. Should be used with <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageTag">Tag of the page.</param>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.INavigationWindow">
            <summary>
            Represents a contract with a <see cref="T:System.Windows.Window"/> that contains <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            Through defined <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/> service allows you to use the MVVM model in <c>WPF UI</c> navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationWindow.GetFrame">
            <summary>
            Provides direct access to the <see cref="T:System.Windows.Controls.Frame"/> used in navigation.
            </summary>
            <returns>Instance of the <see cref="T:System.Windows.Controls.Frame"/> control.</returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationWindow.GetNavigation">
            <summary>
            Provides direct access to the control responsible for navigation.
            </summary>
            <returns>Instance of the <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> control.</returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationWindow.Navigate(System.Type)">
            <summary>
            Lets you navigate to the selected page based on it's type. Should be used with <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageType"><see langword="Type"/> of the page.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationWindow.SetPageService(Wpf.Ui.Mvvm.Contracts.IPageService)">
            <summary>
            Lets you attach the service that delivers page instances to <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
            <param name="pageService">Instance of the <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/> with attached service provider.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationWindow.ShowWindow">
            <summary>
            Triggers the command to open a window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INavigationWindow.CloseWindow">
            <summary>
            Triggers the command to close a window.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.INotifyIconService">
            <summary>
            Represents a contract with a service that provides methods for displaying the icon and menu in the tray area.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.Contracts.INotifyIconService.Id">
            <summary>
            Whether the notify icon is registered in the tray.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.Contracts.INotifyIconService.IsRegistered">
            <summary>
            Whether the notify icon is registered in the tray.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.Contracts.INotifyIconService.TooltipText">
            <summary>
            Gets or sets the ToolTip text displayed when the mouse pointer rests on a notification area icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.Contracts.INotifyIconService.ContextMenu">
            <summary>
            Context menu displayed after clicking the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.Contracts.INotifyIconService.Icon">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> of the tray icon.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INotifyIconService.Register">
            <summary>
            Tries to register the Notify Icon in the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INotifyIconService.Unregister">
            <summary>
            Tries to unregister the Notify Icon from the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INotifyIconService.SetParentWindow(System.Windows.Window)">
            <summary>
            Sets parent window of the tray icon.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INotifyIconService.SetParentHandle(System.IntPtr)">
            <summary>
            Sets handle of the parent window of the tray icon.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.INotifyIconService.GetParentHandle">
            <summary>
            Gets parent window handle.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.IPageService">
            <summary>
            Represents a contract with the service that provides the pages for <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IPageService.GetPage``1">
            <summary>
            Takes a page of the given type.
            </summary>
            <typeparam name="T">Page type.</typeparam>
            <returns>Instance of the registered page.</returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IPageService.GetPage(System.Type)">
            <summary>
            Takes a page of the given type.
            </summary>
            <param name="pageType">Page type.</param>
            <returns>Instance of the registered page.</returns>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.ISnackbarService">
            <summary>
            Represents a contract with the service that provides global <see cref="T:Wpf.Ui.Controls.Snackbar"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.ITaskBarService">
            <summary>
            Represents a contract with a service that provides methods for manipulating the taskbar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.GetState(System.IntPtr)">
            <summary>
            Gets taskbar state of the selected window handle.
            </summary>
            <param name="hWnd">Window handle.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.GetState(System.Windows.Window)">
            <summary>
            Gets taskbar state of the selected window.
            </summary>
            <param name="window">Selected window.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.SetState(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Sets taskbar state of the selected window handle.
            </summary>
            <param name="hWnd">Window handle to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window handle.
            </summary>
            <param name="hWnd">Window handle to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display.</param>
            <param name="total">Maximum number for division.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.SetValue(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window handle.
            </summary>
            <param name="hWnd">Window handle to modify.</param>
            <param name="current">Current value to display.</param>
            <param name="max">Maximum number for division.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.SetState(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Sets taskbar state of the selected window.
            </summary>
            <param name="window">Window to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window.
            </summary>
            <param name="window">Window to modify.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display.</param>
            <param name="total">Maximum number for division.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.ITaskBarService.SetValue(System.Windows.Window,System.Int32,System.Int32)">
            <summary>
            Sets taskbar value of the selected window.
            </summary>
            <param name="window">Window to modify.</param>
            <param name="current">Current value to display.</param>
            <param name="total">Maximum number for division.</param>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Contracts.IThemeService">
            <summary>
            Represents a contract with a service that provides tools for manipulating the theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.GetTheme">
            <summary>
            Gets current application theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.GetSystemTheme">
            <summary>
            Gets current system theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.GetNativeSystemTheme">
            <summary>
            Gets current system theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.SetTheme(Wpf.Ui.Appearance.ThemeType)">
            <summary>
            Sets current application theme.
            </summary>
            <param name="themeType">Theme type to set.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.SetSystemAccent">
            <summary>
            Sets currently used Windows OS accent.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.SetAccent(System.Windows.Media.Color)">
            <summary>
            Sets current application accent.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Contracts.IThemeService.SetAccent(System.Windows.Media.SolidColorBrush)">
            <summary>
            Sets current application accent.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Interfaces.IViewModel">
            <summary>
            Represents a model used in views.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Interfaces.IViewModel.OnMounted(System.Windows.FrameworkElement)">
            <summary>
            Triggered when the model is mounted to the view using the <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/>.
            </summary>
            <param name="parentElement"></param>
        </member>
        <member name="T:Wpf.Ui.Mvvm.Services.NavigationService">
            <summary>
            A service that provides methods related to navigation.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Mvvm.Services.NavigationService._pageService">
            <summary>
            Locally attached page service.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Mvvm.Services.NavigationService.NavigationControl">
            <summary>
            Control representing navigation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.GetFrame">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.SetFrame(System.Windows.Controls.Frame)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.GetNavigation">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.SetNavigation(Wpf.Ui.Controls.Interfaces.INavigation)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.SetPageService(Wpf.Ui.Mvvm.Contracts.IPageService)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.Navigate(System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.Navigate(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NavigationService.Navigate(System.String)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Mvvm.Services.NotifyIconServiceBase">
            <summary>
            Base implementation of the notify icon service.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NotifyIconServiceBase.SetParentWindow(System.Windows.Window)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NotifyIconServiceBase.SetParentHandle(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.NotifyIconServiceBase.GetParentHandle">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Mvvm.Services.TaskBarService">
            <summary>
            Allows you to manage the animations of the window icon in the taskbar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.#ctor">
            <summary>
            Creates new instance and defines dictionary for progress states.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.GetState(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.GetState(System.Windows.Window)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.SetState(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.SetValue(System.Windows.Window,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.SetState(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.TaskBarService.SetValue(System.IntPtr,System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Mvvm.Services.ThemeService">
            <summary>
            Lets you set the app theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.GetTheme">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.GetNativeSystemTheme">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.GetSystemTheme">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.SetTheme(Wpf.Ui.Appearance.ThemeType)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.SetSystemAccent">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.SetAccent(System.Windows.Media.Color)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.Services.ThemeService.SetAccent(System.Windows.Media.SolidColorBrush)">
            <inheritdoc />
        </member>
        <member name="T:Wpf.Ui.Mvvm.ViewModelBase">
            <summary>
            Contains a base implementation of methods that facilitate the creation of properties for views.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Mvvm.ViewModelBase._propertiesCollectionObjects">
            <summary>
            Contains view data.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.ViewModelBase.Concurrent">
            <summary>
            Gets or sets a value indicating whether the properties of the <see cref="T:Wpf.Ui.Mvvm.ViewModelBase"/> should be thread independent.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Mvvm.ViewModelBase.ViewCommand">
            <summary>
            Command which raises the <see cref="M:Wpf.Ui.Mvvm.ViewModelBase.OnViewCommand(System.Object)"/>.
            </summary>
        </member>
        <member name="E:Wpf.Ui.Mvvm.ViewModelBase.PropertyChanged">
            <summary>
            Raised when a property is changed.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.#ctor">
            <summary>
            Creates new instance of the class and defines the property container.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.OnMounted(System.Windows.FrameworkElement)">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.OnViewCommand(System.Object)">
            <summary>
            Triggered when a command is triggered by a <see cref="P:Wpf.Ui.Mvvm.ViewModelBase.ViewCommand"/>.
            </summary>
            <param name="parameter">Passed parameter.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.SetValue(System.Object,System.String)">
            <summary>
            Sets a value of the calling property based on it's name.
            <para>Does not send a change notification if the new value is the same as the current one.</para>
            </summary>
            <param name="value">Value to set.</param>
            <param name="callingMemberPropertyName">Calling property name.</param>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.GetValue(System.String)">
            <summary>
            Gets a value of the calling property based on it's name.
            </summary>
            <param name="callingMemberPropertyName">Calling property name.</param>
            <returns>Property value or <see langword="null"/></returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.GetValue``1(System.String)">
            <summary>
            Gets a value with the specified class of the calling property based on it's name.
            </summary>
            <param name="callingMemberPropertyName">Calling property name.</param>
            <returns>Property value or <see langword="null"/></returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.GetValueOrDefault``1(``0,System.String)">
            <summary>
            Gets a value with the specified class of the calling property based on it's name.
            </summary>
            <param name="defaultValue">Value returned if property is <see langword="null"/>.</param>
            <param name="callingMemberPropertyName">Calling property name.</param>
            <returns>Property value or provided <c>defaultValue</c></returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.GetStructOrDefault``1(``0,System.String)">
            <summary>
            Gets a value with the specified convertible class of the calling property based on it's name.
            </summary>
            <param name="defaultValue">Value returned if property is <see langword="null"/>.</param>
            <param name="callingMemberPropertyName">Calling property name.</param>
            <returns>Property value or provided <c>defaultValue</c></returns>
        </member>
        <member name="M:Wpf.Ui.Mvvm.ViewModelBase.OnPropertyChanged(System.String)">
            <summary>
            Raised notify event for selected property.
            </summary>
            <param name="propertyName">The property about which the notification is to be sent.</param>
        </member>
        <member name="T:Wpf.Ui.Resources">
            <summary>
            Facilitates convenient management of WPF UI resources in the application that uses it.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Resources.Theme">
            <summary>
            Gets or sets the application theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Resources.InitializeTheme(Wpf.Ui.Appearance.ThemeType)">
            <summary>
            Initializes library resources.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Resources.GetResourceUri(System.String)">
            <summary>
            Gets absolute path to the library resource.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Resources.GetThemeResourceName(Wpf.Ui.Appearance.ThemeType)">
            <summary>
            Gets path to the selected theme resource.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Services.NavigationService">
            <summary>
            Internal navigation service.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.NavigationService._disposed">
            <summary>
            Whether the current class is disposed.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.NavigationService._currentPageIndex">
            <summary>
            Currently navigated page index.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.NavigationService._previousPageIndex">
            <summary>
            Previously navigated page index.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.NavigationService._frame">
            <summary>
            Current frame.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationService._pageService">
            <summary>
            MVVM page service.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationService._currentActionIdentifier">
            <summary>
            Current <see cref="T:Wpf.Ui.Common.EventIdentifier"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.NavigationService._eventIdentifier">
            <summary>
            Identifies current Frame process.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.NavigationService._navigationServiceItems">
            <summary>
            <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>'s mirror with cached page contents.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationService.Precache">
            <summary>
            Whether to precache instances after rebuilding.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationService.TransitionDuration">
            <summary>
            Transition duration.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationService.TransitionType">
            <summary>
            Transition type.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.#ctor">
            <summary>
            Creates new instance and prepares internal properties.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.Finalize">
            <summary>
            Control finalizer.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.Navigate(System.Int32,System.Object)">
            <summary>
            Navigates the <see cref="T:System.Windows.Controls.Frame"/> based on provided item Id.
            </summary>
            <param name="pageId">Id of the selected page.</param>
            <param name="dataContext">Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.Navigate(System.Type,System.Object)">
            <summary>
            Navigates the <see cref="T:System.Windows.Controls.Frame"/> based on provided item <see cref="T:System.Type"/>.
            </summary>
            <param name="pageType"><see cref="T:System.Type"/> of the selected page.</param>
            <param name="dataContext">Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.Navigate(System.String,System.Object)">
            <summary>
            Navigates the <see cref="T:System.Windows.Controls.Frame"/> based on provided item tag.
            </summary>
            <param name="pageTag">Tag of the page.</param>
            <param name="dataContext">Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NavigateExternal(System.Object,System.Object)">
            <summary>
            Navigates statically outside of the current navigation scope.
            </summary>
            <param name="frameworkElement"><see cref="T:System.Windows.FrameworkElement"/> to navigate.</param>
            <param name="dataContext">Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NavigateExternal(System.Uri,System.Object)">
            <summary>
            Navigates statically outside of the current navigation scope.
            </summary>
            <param name="frameworkElementUri">Uri of the <see cref="T:System.Windows.FrameworkElement"/> to navigate.</param>
            <param name="dataContext">Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.SetContext(System.String,System.Object)">
            <summary>
            Sets DataContext for the selected <see cref="T:Wpf.Ui.Services.NavigationServiceItem"/> instance.
            </summary>
            <param name="pageTag">Tag of the page.</param>
            <param name="dataContext">Context to set.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.SetContext(System.Int32,System.Object)">
            <summary>
            Sets DataContext for the selected <see cref="T:Wpf.Ui.Services.NavigationServiceItem"/> instance.
            </summary>
            <param name="serviceItemId">Selected page Id.</param>
            <param name="dataContext">Context to set.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.UpdateItems(System.Collections.Generic.IEnumerable{Wpf.Ui.Controls.Interfaces.INavigationControl},System.Collections.Generic.IEnumerable{Wpf.Ui.Controls.Interfaces.INavigationControl})">
            <summary>
            Creates mirror of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/> based on provided collection of <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationControl"/>'s.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.ClearCache">
            <summary>
            Clears cache stored inside service items.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.SetFrame(System.Windows.Controls.Frame)">
            <summary>
            Sets currently used <see cref="T:System.Windows.Controls.Frame"/>.
            </summary>
            <param name="frame">Frame to set.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.SetService(Wpf.Ui.Mvvm.Contracts.IPageService)">
            <summary>
            Sets currently used <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
            <param name="pageService">Service to set.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.GetService">
            <summary>
            Gets currently used <see cref="T:Wpf.Ui.Mvvm.Contracts.IPageService"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.GetCurrentTag">
            <summary>
            Gets currently displayed item tag.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.GetCurrentId">
            <summary>
            Currently displayed page Id.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.GetPreviousId">
            <summary>
            Previously displayed page Id.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.Dispose(System.Boolean)">
            <summary>
            If disposing equals <see langword="true"/>, the method has been called directly or indirectly
            by a user's code. Managed and unmanaged resources can be disposed. If disposing equals <see langword="false"/>,
            the method has been called by the runtime from inside the finalizer and you should not
            reference other objects.
            <para>Only unmanaged resources can be disposed.</para>
            </summary>
            <param name="disposing">If disposing equals <see langword="true"/>, dispose all managed and unmanaged resources.</param>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NavigateInternal(System.Int32,System.Object)">
            <summary>
            Navigates internally depending on current state of the service.
            </summary>
            <param name="serviceItemId">Id of the item to navigate.</param>
            <param name="dataContext">Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NavigateInternalByItemWithCache(System.Int32,System.Object)">
            <summary>
            Navigates internally without service and with enabled cache.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NavigateInternalByItemWithoutCache(System.Int32,System.Object)">
            <summary>
            Navigates internally without service and with cache disabled.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.CreateFrameworkElementInstance(System.Type,System.Object)">
            <summary>
            Tries to create an instance from the selected page type.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.OnFrameNavigated(System.Object,System.Windows.Navigation.NavigationEventArgs)">
            <summary>
            Event triggered when the frame has already loaded the view, if the page uses the Cache, Content of the Frame should be saved.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.OnFrameNavigating(System.Object,System.Windows.Navigation.NavigatingCancelEventArgs)">
            <summary>
            Event fired when Frame received a request to navigate.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NotifyFrameContentAboutEnter">
            <summary>
            Notifies <see cref="T:System.Windows.Controls.Frame"/> content about being navigated.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.NotifyFrameContentAboutLeave">
            <summary>
            Notifies <see cref="T:System.Windows.Controls.Frame"/> content about leaving the navigation context.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationService.PrecacheItems">
            <summary>
            Precaches instances of the navigation items.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Services.NavigationServiceActivator">
            <summary>
            Internal activator for navigation purposes.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationServiceActivator.CreateInstance(System.Type)">
            <summary>
            Creates new instance of type derived from <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="pageType"><see cref="T:System.Windows.FrameworkElement"/> to instantiate.</param>
            <returns>Instance of the <see cref="T:System.Windows.FrameworkElement"/> object or <see langword="null"/>.</returns>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationServiceActivator.CreateInstance(System.Type,System.Object)">
            <summary>
            Creates new instance of type derived from <see cref="T:System.Windows.FrameworkElement"/>.
            </summary>
            <param name="pageType"><see cref="T:System.Windows.FrameworkElement"/> to instantiate.</param>
            <param name="dataContext">Additional context to set.</param>
            <returns>Instance of the <see cref="T:System.Windows.FrameworkElement"/> object or <see langword="null"/>.</returns>
        </member>
        <member name="T:Wpf.Ui.Services.NavigationServiceExtraData">
            <summary>
            Additional data passed through the <see cref="M:System.Windows.Controls.Frame.Navigate(System.Object)"/> method.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceExtraData.PageId">
            <summary>
            Current page id.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceExtraData.Cache">
            <summary>
            Whether we should use the cache.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceExtraData.DataContext">
            <summary>
            Additional <see cref="P:System.Windows.FrameworkElement.DataContext"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Services.NavigationServiceItem">
            <summary>
            Represents <see cref="!:Interfaces.INavigationItem"/> in <see cref="T:Wpf.Ui.Controls.Interfaces.INavigation"/> internal methods.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceItem.Tag">
            <summary>
            Tags of the presented page.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceItem.Cache">
            <summary>
            Whether the cache is active.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceItem.Type">
            <summary>
            Type of the <see cref="P:Wpf.Ui.Services.NavigationServiceItem.Instance"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceItem.Source">
            <summary>
            Source of the <see cref="P:Wpf.Ui.Services.NavigationServiceItem.Instance"/>.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Services.NavigationServiceItem.Instance">
            <summary>
            Instantiated page content.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationServiceItem.SetContext(System.Object)">
            <summary>
            Sets DataContext of the <see cref="P:Wpf.Ui.Services.NavigationServiceItem.Instance"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.NavigationServiceItem.Create(Wpf.Ui.Controls.Interfaces.INavigationItem)">
            <summary>
            Creates <see cref="T:Wpf.Ui.Services.NavigationServiceItem"/> from <see cref="T:Wpf.Ui.Controls.Interfaces.INavigationItem"/>.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Services.NotifyIconService">
            <summary>
            Internal service for Notify Icon management.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Services.TransitionService">
            <summary>
            Provides tools for <see cref="T:System.Windows.FrameworkElement"/> animation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Services.TransitionService.ApplyTransition(System.Object,Wpf.Ui.Services.TransitionType,System.Int32)">
            <summary>
            Attempts to apply an animation effect while adding content to the frame.
            </summary>
            <param name="element">Currently rendered element.</param>
            <param name="type">Selected transition type.</param>
            <param name="duration">Transition duration.</param>
        </member>
        <member name="T:Wpf.Ui.Services.TransitionType">
            <summary>
            Available types of transitions.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.TransitionType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.TransitionType.FadeIn">
            <summary>
            Change opacity.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.TransitionType.FadeInWithSlide">
            <summary>
            Change opacity and slide from bottom.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.TransitionType.SlideBottom">
            <summary>
            Slide from bottom.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.TransitionType.SlideRight">
            <summary>
            Slide from the right side.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Services.TransitionType.SlideLeft">
            <summary>
            Slide from the left side.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Styles.Controls.ContextMenu">
            <summary>
            Overwrites ContextMenu-Style for some UIElements (like RichTextBox) that don't take the default ContextMenu-Style by default.
            <para>The code inside this CodeBehind-Class forces this ContextMenu-Style on these UIElements through Reflection (because it is only accessible through Reflection it is also only possible through CodeBehind and not XAML)</para>
            </summary>
            <summary>
            ContextMenu
            </summary>
        </member>
        <member name="M:Wpf.Ui.Styles.Controls.ContextMenu.#ctor">
            <summary>
            Registers editing <see cref="T:Wpf.Ui.Styles.Controls.ContextMenu"/> styles with <see cref="T:System.Windows.Threading.Dispatcher"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Styles.Controls.ContextMenu.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Wpf.Ui.Styles.Controls.Menu">
            <summary>
            Extension to the menu.
            </summary>
            <summary>
            Menu
            </summary>
        </member>
        <member name="M:Wpf.Ui.Styles.Controls.Menu.#ctor">
            <summary>
            Sets menu alignment on initialization.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Styles.Controls.Menu.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:Wpf.Ui.Syntax.Highlighter">
            <summary>
            Formats a string of code into <see cref="T:System.Windows.Controls.TextBox"/> control.
            <para>Implementation and regex patterns inspired by <see href="https://github.com/antoniandre/simple-syntax-highlighter"/>.</para>
            </summary>
        </member>
        <member name="T:Wpf.Ui.Syntax.SyntaxLanguage">
            <summary>
            Supported languages for syntax highlighting.
            </summary>
        </member>
        <member name="T:Wpf.Ui.TaskBar.TaskBarProgress">
            <summary>
            Allows to change the status of the displayed notification in the application icon on the TaskBar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.IsSupported">
            <summary>
            Gets a value indicating whether the current operating system supports task bar manipulation.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetState(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Allows to change the status of the progress bar in the task bar.
            </summary>
            <param name="window">Window to manipulate.</param>
            <param name="taskBarProgressState">State of the progress indicator.</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetState(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState)">
            <summary>
            Allows to change the status of the progress bar in the task bar.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskBarProgressState">State of the progress indicator.</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="window">Window to manipulate.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.Windows.Window,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="window">Window to manipulate.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
            <param name="total">Total number for division.</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
        </member>
        <member name="M:Wpf.Ui.TaskBar.TaskBarProgress.SetValue(System.IntPtr,Wpf.Ui.TaskBar.TaskBarProgressState,System.Int32,System.Int32)">
            <summary>
            Allows to change the fill of the task bar.
            </summary>
            <param name="hWnd">Window handle.</param>
            <param name="taskBarProgressState">Progress sate to set.</param>
            <param name="current">Current value to display</param>
            <param name="total">Total number for division.</param>
        </member>
        <member name="T:Wpf.Ui.TaskBar.TaskBarProgressState">
            <summary>
            Specifies the state of the progress indicator in the Windows task bar.
            <see href="https://docs.microsoft.com/en-us/dotnet/api/system.windows.shell.taskbaritemprogressstate?view=windowsdesktop-5.0"/>
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.None">
            <summary>
            No progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Indeterminate">
            <summary>
            A pulsing green (W10) or gray (W11) indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Normal">
            <summary>
            A green progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Error">
            <summary>
            A red progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TaskBar.TaskBarProgressState.Paused">
            <summary>
            A yellow progress indicator is displayed in the task bar area.
            </summary>
        </member>
        <member name="T:Wpf.Ui.TitleBar.SnapLayout">
            <summary>
            Brings the Snap Layout functionality from Windows 11 to a custom <see cref="T:Wpf.Ui.Controls.TitleBar"/>.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayout._buttons">
            <summary>
            List of snap layout buttons.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayout._currentTheme">
            <summary>
            Currently used theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayout._currentHoverColor">
            <summary>
            Currently active hover color.
            </summary>
        </member>
        <member name="P:Wpf.Ui.TitleBar.SnapLayout.Theme">
            <summary>
            Current theme.
            </summary>
        </member>
        <member name="P:Wpf.Ui.TitleBar.SnapLayout.DefaultButtonBackground">
            <summary>
            Default background.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayout.HoverColorLight">
            <summary>
            Hover background when light theme.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayout.HoverColorDark">
            <summary>
            Hover background when dark theme.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayout.#ctor(System.Windows.Window,Wpf.Ui.Controls.Button,Wpf.Ui.Controls.Button)">
            <summary>
            Creates new instance.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayout.IsSupported">
            <summary>
            Determines whether the snap layout is supported.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayout.Register(System.Windows.Window,Wpf.Ui.Controls.Button,Wpf.Ui.Controls.Button)">
            <summary>
            Registers the snap layout for provided buttons and window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayout.HwndSourceHook(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            Represents the method that handles Win32 window messages.
            </summary>
            <param name="hWnd">The window handle.</param>
            <param name="uMsg">The message ID.</param>
            <param name="wParam">The message's wParam value.</param>
            <param name="lParam">The message's lParam value.</param>
            <param name="handled">A value that indicates whether the message was handled. Set the value to <see langword="true"/> if the message was handled; otherwise, <see langword="false"/>.</param>
            <returns>The appropriate return value depends on the particular message. See the message documentation details for the Win32 message being handled.</returns>
        </member>
        <member name="T:Wpf.Ui.TitleBar.SnapLayoutButton">
            <summary>
            Represents a snap layout button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayoutButton._visual">
            <summary>
            Visual controls of the button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayoutButton.Type">
            <summary>
            Type of the button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.SnapLayoutButton._renderedSize">
            <summary>
            Rendered size of the button control.
            </summary>
        </member>
        <member name="P:Wpf.Ui.TitleBar.SnapLayoutButton.IsClickedDown">
            <summary>
            Whether the button is clicked.
            </summary>
        </member>
        <member name="P:Wpf.Ui.TitleBar.SnapLayoutButton.IsHovered">
            <summary>
            Whether the mouse is over the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayoutButton.#ctor(Wpf.Ui.Controls.Button,Wpf.Ui.TitleBar.TitleBarButton,System.Double)">
            <summary>
            Creates new instance and sets internals.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayoutButton.InvokeClick">
            <summary>
            Invokes click on the button.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayoutButton.Hover(System.Windows.Media.SolidColorBrush)">
            <summary>
            Forces button background to change.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayoutButton.RemoveHover(System.Windows.Media.SolidColorBrush)">
            <summary>
            Forces button background to change.
            </summary>
        </member>
        <member name="M:Wpf.Ui.TitleBar.SnapLayoutButton.IsMouseOver(System.IntPtr)">
            <summary>
            Indicates whether the mouse is over the button.
            </summary>
        </member>
        <member name="T:Wpf.Ui.TitleBar.TitleBarButton">
            <summary>
            Type of the Title Bar button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.TitleBarButton.Unknown">
            <summary>
            Unknown button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.TitleBarButton.Minimize">
            <summary>
            Maximize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.TitleBarButton.Close">
            <summary>
            Close button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.TitleBarButton.Maximize">
            <summary>
            Maximize button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.TitleBarButton.Restore">
            <summary>
            Restore button.
            </summary>
        </member>
        <member name="F:Wpf.Ui.TitleBar.TitleBarButton.Help">
            <summary>
            Help button.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Tray.Hicon">
            <summary>
            Facilitates the creation of a hIcon.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.Hicon.FromApp">
            <summary>
            Tries to take the icon pointer assigned to the application.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wpf.Ui.Tray.Hicon.FromSource(System.Windows.Media.ImageSource)">
            <summary>
            Tries to allocate an icon to memory and fetch a pointer to it.
            </summary>
            <param name="source">Image source.</param>
        </member>
        <member name="T:Wpf.Ui.Tray.INotifyIcon">
            <summary>
            Represents an icon in the tray menu.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.IsRegistered">
            <summary>
            Whether the icon is currently registered in the tray area.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.Id">
            <summary>
            Gets the Shell identifier of the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.TooltipText">
            <summary>
            Gets or sets the ToolTip text displayed when the mouse pointer rests on a notification area icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.Icon">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> of the tray icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.HookWindow">
            <summary>
            Gets or sets the hWnd that will receive messages for the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.ParentHandle">
            <summary>
            Gets or sets the hWnd that the icon belongs to.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.INotifyIcon.ContextMenu">
            <summary>
            Gets or sets the menu displayed when the icon is right-clicked.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Tray.NotifyIconBase">
            <summary>
            Base implementation of NotifyIcon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.ShellIconData">
            <summary>
            Provides a set of information for Shell32 to manipulate the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.Disposed">
            <summary>
            Whether the class is disposed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.IsRegistered">
            <summary>
            Whether the class is disposed.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.HookWindow">
            <summary>
            Gets or sets the hWnd that will receive messages for the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.ParentHandle">
            <summary>
            Gets or sets the hWnd that the icon belongs to.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.Id">
            <summary>
            Gets the Shell identifier of the icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.TooltipText">
            <summary>
            Gets or sets the ToolTip text displayed when the mouse pointer rests on a notification area icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.Icon">
            <summary>
            Gets or sets the <see cref="T:System.Windows.Media.Imaging.BitmapSource"/> of the tray icon.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.ContextMenu">
            <summary>
            Gets or sets the menu displayed when the icon is right-clicked.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.FocusOnLeftClick">
            <summary>
            Gets or sets the value indicating whether to focus the <see cref="P:System.Windows.Application.MainWindow"/> on single left click.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.NotifyIconBase.MenuOnRightClick">
            <summary>
            Gets or sets the value indicating whether to show the <see cref="T:System.Windows.Controls.Menu"/> on single right click.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.Finalize">
            <summary>
            Class finalizer.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.Dispose">
            <inheritdoc />
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.FocusApp">
            <summary>
            Focus the application main window.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OpenMenu">
            <summary>
            Shows the menu if it has been added.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OnLeftClick">
            <summary>
            This virtual method is called when tray icon is left-clicked and it raises the left click <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OnLeftDoubleClick">
            <summary>
            This virtual method is called when tray icon is left-clicked and it raises the left double click <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OnRightClick">
            <summary>
            This virtual method is called when tray icon is left-clicked and it raises the right click <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OnRightDoubleClick">
            <summary>
            This virtual method is called when tray icon is left-clicked and it raises the right double click <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OnMiddleClick">
            <summary>
            This virtual method is called when tray icon is left-clicked and it raises the middle click <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.OnMiddleDoubleClick">
            <summary>
            This virtual method is called when tray icon is left-clicked and it raises the middle double click <see langword="event"/>.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.Dispose(System.Boolean)">
            <summary>
            If disposing equals <see langword="true"/>, the method has been called directly or indirectly
            by a user's code. Managed and unmanaged resources can be disposed. If disposing equals <see langword="false"/>,
            the method has been called by the runtime from inside the finalizer and you should not
            reference other objects.
            <para>Only unmanaged resources can be disposed.</para>
            </summary>
            <param name="disposing">If disposing equals <see langword="true"/>, dispose all managed and unmanaged resources.</param>
        </member>
        <member name="M:Wpf.Ui.Tray.NotifyIconBase.WndProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr,System.Boolean@)">
            <summary>
            A callback function that processes messages sent to a window.
            The WNDPROC type defines a pointer to this callback function.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Tray.TrayData">
            <summary>
            Singleton containing persistent information about icons in the tray menu for application session.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.TrayData.NotifyIcons">
            <summary>
            Collection of registered tray icons.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Tray.TrayHandler">
            <summary>
            Manages the Win32 API and Windows messages.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Tray.TrayHandler.ElementId">
            <summary>
            Id of the hooked element.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.TrayHandler.#ctor(System.String,System.IntPtr)">
            <summary>
            Creates a new hWnd as a child with transparency parameters, no size and in the default position. Then, it attach the default delegation to the messages it receives.
            </summary>
            <param name="name">The name of the created window.</param>
            <param name="parent">Parent of the created window.</param>
        </member>
        <member name="T:Wpf.Ui.Tray.TrayManager">
            <summary>
            Responsible for managing the icons in the Tray bar.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.TrayManager.Register(Wpf.Ui.Controls.NotifyIcon)">
            <summary>
            Tries to register the <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> in the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.TrayManager.Register(Wpf.Ui.Controls.NotifyIcon,System.Windows.Window)">
            <summary>
            Tries to register the <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> in the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.TrayManager.Register(Wpf.Ui.Controls.NotifyIcon,System.Windows.Interop.HwndSource)">
            <summary>
            Tries to register the <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> in the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.TrayManager.Unregister(Wpf.Ui.Controls.NotifyIcon)">
            <summary>
            Tries to unregister the <see cref="T:Wpf.Ui.Controls.NotifyIcon"/> from the shell.
            </summary>
        </member>
        <member name="M:Wpf.Ui.Tray.TrayManager.GetParentSource">
            <summary>
            Gets application source.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Win32.Utilities">
            <summary>
            Common Window utilities.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsNT">
            <summary>
            Whether the operating system is NT or newer. 
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSVistaOrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 6.0.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows7OrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 6.1.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows8OrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 6.2.
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows10OrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 10.0* (build 10240).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows11OrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 10.0* (build 22000).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows11Insider1OrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 10.0* (build 22523).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsOSWindows11Insider2OrNewer">
            <summary>
            Whether the operating system version is greater than or equal to 10.0* (build 22557).
            </summary>
        </member>
        <member name="P:Wpf.Ui.Win32.Utilities.IsCompositionEnabled">
            <summary>
            Indicates whether Desktop Window Manager (DWM) composition is enabled.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Win32.Win32Constant">
            <summary>
            Common native constants.
            </summary>
        </member>
        <member name="T:Wpf.Ui.Win32.WindowsRelease">
            <summary>
            Collection of Windows releases with it's build numbers.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows95">
            <summary>
            Windows 95.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows98">
            <summary>
            Windows 98.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows2000">
            <summary>
            Windows 2000.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.WindowsXP">
            <summary>
            Windows XP.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.WindowsMe">
            <summary>
            Windows Me.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows7">
            <summary>
            Windows 7.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows7Sp1">
            <summary>
            Windows 7, Service Pack 1.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows8">
            <summary>
            Windows 8.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows81">
            <summary>
            Windows 8.1.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10">
            <summary>
            Windows 10, Version 1507.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V1511">
            <summary>
            Windows 10 November Update, Version 1507.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V1607">
            <summary>
            Windows 10 Anniversary Update, Version 1607.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V1703">
            <summary>
            Windows 10 Creators Update, Version 1703.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V1809">
            <summary>
            Windows 10 October 2018 Update, Version 1809.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V19H1">
            <summary>
            Windows 10 May 2019 Update, Version 1903.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10Insider1">
            <summary>
            Windows 10 Insider Preview Build 18985
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V20H1">
            <summary>
            Windows 10 May 2020 Update, Version 2004.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V20H2">
            <summary>
            Windows 10 October 2020 Update, Version 20H2.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V21H1">
            <summary>
            Windows 10 May 2021 Update, Version 21H1.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows10V21H2">
            <summary>
            Windows 10 November 2021 Update, Version 21H2.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.WindowsServer2022">
            <summary>
            Windows Server 2022.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows11">
            <summary>
            Windows 11, Version 21H2.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows11Insider1">
            <summary>
            Windows 11 Insider Preview Build 22523 - Dev Channel.
            </summary>
        </member>
        <member name="F:Wpf.Ui.Win32.WindowsRelease.Windows11Insider2">
            <summary>
            Windows 11 Insider Preview Build 22557 - Dev Channel.
            </summary>
        </member>
        <member name="T:XamlGeneratedNamespace.GeneratedInternalTypeHelper">
            <summary>
            GeneratedInternalTypeHelper
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
            <summary>
            CreateInstance
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
            <summary>
            GetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
            <summary>
            SetPropertyValue
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
            <summary>
            CreateDelegate
            </summary>
        </member>
        <member name="M:XamlGeneratedNamespace.GeneratedInternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
            <summary>
            AddEventHandler
            </summary>
        </member>
    </members>
</doc>
