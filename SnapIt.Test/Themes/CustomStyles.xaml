<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mah="clr-namespace:MahApps.Metro.Controls;assembly=MahApps.Metro">

    <Style x:Key="ListBoxItemStyle1" TargetType="{x:Type ListBoxItem}">
        <Setter Property="mah:ItemHelper.ActiveSelectionBackgroundBrush" Value="Transparent" />
        <Setter Property="mah:ItemHelper.ActiveSelectionForegroundBrush" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="mah:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
        <Setter Property="mah:ItemHelper.DisabledSelectedBackgroundBrush" Value="Transparent" />
        <Setter Property="mah:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
        <Setter Property="mah:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray9}" />
        <Setter Property="mah:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray9}" />
        <Setter Property="mah:ItemHelper.HoverSelectedForegroundBrush" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
        <Setter Property="mah:ItemHelper.SelectedBackgroundBrush" Value="Transparent" />
        <Setter Property="mah:ItemHelper.SelectedForegroundBrush" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />

        <Style.BasedOn>
            <Style TargetType="{x:Type ListBoxItem}">
                <Setter Property="FocusVisualStyle" Value="{Binding ItemFocusVisualStyle, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type mah:HamburgerMenu}}}" />
                <Setter Property="IsTabStop" Value="{Binding IsTabStop, FallbackValue=True, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type mah:HamburgerMenu}}}" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid
                                x:Name="RootGrid"
                                Background="Transparent"
                                RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                <Border
                                    x:Name="Border"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <Grid Margin="{TemplateBinding BorderThickness}">
                                    <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                                        <Grid.Visibility>
                                            <Binding
                                                Mode="OneWay"
                                                Path="ShowSelectionIndicator"
                                                RelativeSource="{RelativeSource FindAncestor,
                                                                                AncestorLevel=1,
                                                                                AncestorType={x:Type mah:HamburgerMenu}}">
                                                <Binding.Converter>
                                                    <BooleanToVisibilityConverter />
                                                </Binding.Converter>
                                            </Binding>
                                        </Grid.Visibility>
                                        <Rectangle
                                            x:Name="SelectionIndicator"
                                            Width="4"
                                            Height="30"
                                            Fill="{TemplateBinding Foreground}"
                                            Focusable="False"
                                            Opacity="0" />
                                    </Grid>
                                    <ContentPresenter
                                        x:Name="ContentPresenter"
                                        Margin="{TemplateBinding Padding}"
                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                        Content="{TemplateBinding Content}"
                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                </Grid>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.SelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="White" />
                                    <Setter TargetName="SelectionIndicator" Property="Opacity" Value="1" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsSelected" Value="True" />
                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="White" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="White" />
                                </MultiTrigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsMouseOver" Value="True" />
                                        <Condition Property="IsSelected" Value="False" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.HoverBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.HoverForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="White" />
                                </MultiTrigger>
                                <Trigger Property="mah:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding (mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Trigger>
                                <Trigger Property="mah:ItemHelper.IsMouseRightButtonPressed" Value="True">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding (mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.DisabledBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="RootGrid" Property="Background" Value="{Binding Background, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding (mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsEnabled" Value="False" />
                                        <Condition Property="IsSelected" Value="True" />
                                    </MultiTrigger.Conditions>
                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource Self}}" />
                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                    <Setter TargetName="SelectionIndicator" Property="Fill" Value="{Binding (mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="mah:ItemHelper.HoverForegroundBrush" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                <Setter Property="mah:ItemHelper.SelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Accent}" />
                <Style.BasedOn>
                    <Style TargetType="{x:Type ListBoxItem}">
                        <Setter Property="Background" Value="Transparent" />
                        <Setter Property="BorderThickness" Value="0" />
                        <Setter Property="Foreground" Value="{Binding Foreground, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
                        <Setter Property="Margin" Value="0" />
                        <Setter Property="MinHeight" Value="0" />
                        <Setter Property="Padding" Value="0" />
                        <Setter Property="VerticalContentAlignment" Value="Stretch" />
                        <Style.BasedOn>
                            <Style TargetType="{x:Type ListBoxItem}">
                                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.ThemeBackground}" />
                                <Setter Property="BorderThickness" Value="0" />
                                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Text}" />
                                <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, FallbackValue=Stretch, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                <Setter Property="Margin" Value="0" />
                                <Setter Property="MinHeight" Value="25" />
                                <Setter Property="Padding" Value="5,0,0,0" />
                                <Setter Property="RenderOptions.ClearTypeHint" Value="{Binding (RenderOptions.ClearTypeHint), FallbackValue=Auto, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                <Setter Property="SnapsToDevicePixels" Value="True" />
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                                            <Grid
                                                x:Name="RootGrid"
                                                Background="Transparent"
                                                RenderOptions.ClearTypeHint="{TemplateBinding RenderOptions.ClearTypeHint}">
                                                <Border
                                                    x:Name="Border"
                                                    Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                <Grid Margin="{TemplateBinding BorderThickness}">
                                                    <ContentPresenter
                                                        x:Name="ContentPresenter"
                                                        Margin="{TemplateBinding Padding}"
                                                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                                        Content="{TemplateBinding Content}"
                                                        ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                                        ContentTemplate="{TemplateBinding ContentTemplate}"
                                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Grid>
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsSelected" Value="True">
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.SelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.SelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Trigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsSelected" Value="True" />
                                                        <Condition Property="Selector.IsSelectionActive" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.ActiveSelectionBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.ActiveSelectionForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True" />
                                                        <Condition Property="IsSelected" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.HoverSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.HoverSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </MultiTrigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True" />
                                                        <Condition Property="IsSelected" Value="False" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.HoverBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.HoverForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </MultiTrigger>
                                                <Trigger Property="mah:ItemHelper.IsMouseLeftButtonPressed" Value="True">
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.MouseLeftButtonPressedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.MouseLeftButtonPressedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Trigger>
                                                <Trigger Property="mah:ItemHelper.IsMouseRightButtonPressed" Value="True">
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.MouseRightButtonPressedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.MouseRightButtonPressedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Trigger>
                                                <Trigger Property="IsEnabled" Value="False">
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.DisabledBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.DisabledForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="RootGrid" Property="Background" Value="{Binding Background, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </Trigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsEnabled" Value="False" />
                                                        <Condition Property="IsSelected" Value="True" />
                                                    </MultiTrigger.Conditions>
                                                    <Setter TargetName="Border" Property="Background" Value="{Binding (mah:ItemHelper.DisabledSelectedBackgroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                    <Setter TargetName="ContentPresenter" Property="TextElement.Foreground" Value="{Binding (mah:ItemHelper.DisabledSelectedForegroundBrush), Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}" />
                                                </MultiTrigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                                <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, FallbackValue=Center, Mode=OneWay, RelativeSource={RelativeSource FindAncestor, AncestorLevel=1, AncestorType={x:Type ItemsControl}}}" />
                                <Setter Property="mah:ItemHelper.ActiveSelectionBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Accent}" />
                                <Setter Property="mah:ItemHelper.ActiveSelectionForegroundBrush" Value="{DynamicResource MahApps.Brushes.Selected.Foreground}" />
                                <Setter Property="mah:ItemHelper.DisabledForegroundBrush" Value="{DynamicResource MahApps.Brushes.Gray}" />
                                <Setter Property="mah:ItemHelper.DisabledSelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Gray7}" />
                                <Setter Property="mah:ItemHelper.DisabledSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Selected.Foreground}" />
                                <Setter Property="mah:ItemHelper.HoverBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Accent3}" />
                                <Setter Property="mah:ItemHelper.HoverForegroundBrush" Value="{DynamicResource MahApps.Brushes.Text}" />
                                <Setter Property="mah:ItemHelper.HoverSelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Accent}" />
                                <Setter Property="mah:ItemHelper.HoverSelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Selected.Foreground}" />
                                <Setter Property="mah:ItemHelper.SelectedBackgroundBrush" Value="{DynamicResource MahApps.Brushes.Accent2}" />
                                <Setter Property="mah:ItemHelper.SelectedForegroundBrush" Value="{DynamicResource MahApps.Brushes.Selected.Foreground}" />
                            </Style>
                        </Style.BasedOn>
                    </Style>
                </Style.BasedOn>
            </Style>
        </Style.BasedOn>
    </Style>

    <Style x:Key="SnapIt.Styles.ToggleButton.Flat" TargetType="{x:Type ToggleButton}">
        <Style.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Highlight}" />
                <Setter Property="Foreground" Value="White" />
            </Trigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Gray9}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsMouseOver" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Accent2}" />
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="False" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Button.Flat.Background.Pressed}" />
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Button.Flat.Foreground.Pressed}" />
            </MultiTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsPressed" Value="True" />
                    <Condition Property="IsChecked" Value="True" />
                </MultiTrigger.Conditions>
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Highlight}" />
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.IdealForeground}" />
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Gray2}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MahApps.Styles.Button.FocusVisualStyle.Flat}" />
        <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.Button.Flat}" />
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <mah:ClipBorder
                        Name="Border"
                        Margin="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <mah:ContentControlEx
                            Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </mah:ClipBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SnapIt.Styles.Button.Flat" TargetType="{x:Type ButtonBase}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.WindowButtonCommands.Background.MouseOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundBaseMediumHigh}" />
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundAccent}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Gray2}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.Window.Background}" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MahApps.Styles.Button.FocusVisualStyle.Flat}" />
        <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.Button.Flat}" />
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Text}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <mah:ClipBorder
                        Name="Border"
                        Margin="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <mah:ContentControlEx
                            Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </mah:ClipBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="SnapIt.Styles.Hamburger.Button.Flat" TargetType="{x:Type ButtonBase}">
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.WindowButtonCommands.Background.MouseOver}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundBaseMediumHigh}" />
                <Setter Property="Background" Value="{DynamicResource MahApps.Brushes.SystemControlBackgroundAccent}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Gray2}" />
            </Trigger>
        </Style.Triggers>
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{DynamicResource MahApps.Styles.Button.FocusVisualStyle.Flat}" />
        <Setter Property="FontSize" Value="{DynamicResource MahApps.Font.Size.Button.Flat}" />
        <Setter Property="Foreground" Value="{DynamicResource MahApps.Brushes.Text}" />
        <Setter Property="Padding" Value="10,5,10,5" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <mah:ClipBorder
                        Name="Border"
                        Margin="0"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <mah:ContentControlEx
                            Name="PART_ContentPresenter"
                            Padding="{TemplateBinding Padding}"
                            HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(mah:ControlsHelper.ContentCharacterCasing)}"
                            ContentStringFormat="{TemplateBinding ContentStringFormat}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </mah:ClipBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>